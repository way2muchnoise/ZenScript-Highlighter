{
   "scope": "plain.text.zs, source.zs",

   "completions":
   [
      { "trigger": "addShaped\tcrafttweaker.recipes.IRecipeManager", "contents": "crafttweaker.recipes.IRecipeManager.addShaped(output, ingredients[][], optionalFunction, optionalAction);" },
      { "trigger": "addShaped\tcrafttweaker.recipes.IRecipeManager", "contents": "crafttweaker.recipes.IRecipeManager.addShaped(name, output, ingredients[][], optionalFunction, optionalAction);" },
      { "trigger": "addShapedMirrored\tcrafttweaker.recipes.IRecipeManager", "contents": "crafttweaker.recipes.IRecipeManager.addShapedMirrored(output, ingredients[][], optionalFunction, optionalAction);" },
      { "trigger": "addShapedMirrored\tcrafttweaker.recipes.IRecipeManager", "contents": "crafttweaker.recipes.IRecipeManager.addShapedMirrored(name, output, ingredients[][], optionalFunction, optionalAction);" },
      { "trigger": "addShapeless\tcrafttweaker.recipes.IRecipeManager", "contents": "crafttweaker.recipes.IRecipeManager.addShapeless(output, ingredients[], optionalFunction, optionalAction);" },
      { "trigger": "addShapeless\tcrafttweaker.recipes.IRecipeManager", "contents": "crafttweaker.recipes.IRecipeManager.addShapeless(name, output, ingredients[], optionalFunction, optionalAction);" },
      { "trigger": "removeAll\tcrafttweaker.recipes.IRecipeManager", "contents": "crafttweaker.recipes.IRecipeManager.removeAll();" },
      { "trigger": "remove\tcrafttweaker.recipes.IRecipeManager", "contents": "crafttweaker.recipes.IRecipeManager.remove(output, optionalNbtMatch);" },
      { "trigger": "removeByRecipeName\tcrafttweaker.recipes.IRecipeManager", "contents": "crafttweaker.recipes.IRecipeManager.removeByRecipeName(recipeName);" },
      { "trigger": "removeByRegex\tcrafttweaker.recipes.IRecipeManager", "contents": "crafttweaker.recipes.IRecipeManager.removeByRegex(regexString);" },
      { "trigger": "removeShaped\tcrafttweaker.recipes.IRecipeManager", "contents": "crafttweaker.recipes.IRecipeManager.removeShaped(output, optionalIngredients[][]);" },
      { "trigger": "removeShapeless\tcrafttweaker.recipes.IRecipeManager", "contents": "crafttweaker.recipes.IRecipeManager.removeShapeless(output, optionalIngredients[], optionalWildcard);" },
      { "trigger": "remove\tcrafttweaker.recipes.IFurnaceManager", "contents": "crafttweaker.recipes.IFurnaceManager.remove(output, optionalInput);" },
      { "trigger": "removeAll\tcrafttweaker.recipes.IFurnaceManager", "contents": "crafttweaker.recipes.IFurnaceManager.removeAll();" },
      { "trigger": "addRecipe\tcrafttweaker.recipes.IFurnaceManager", "contents": "crafttweaker.recipes.IFurnaceManager.addRecipe(output, input, optionalXp);" },
      { "trigger": "setFuel\tcrafttweaker.recipes.IFurnaceManager", "contents": "crafttweaker.recipes.IFurnaceManager.setFuel(item, fuel);" },
      { "trigger": "addRecipe\tmods.actuallyadditions.AtomicReconstructor", "contents": "mods.actuallyadditions.AtomicReconstructor.addRecipe(output, input, energyUsed);" },
      { "trigger": "removeRecipe\tmods.actuallyadditions.AtomicReconstructor", "contents": "mods.actuallyadditions.AtomicReconstructor.removeRecipe(output);" },
      { "trigger": "addReturn\tmods.actuallyadditions.BallOfFur", "contents": "mods.actuallyadditions.BallOfFur.addReturn(output, chance);" },
      { "trigger": "removeReturn\tmods.actuallyadditions.BallOfFur", "contents": "mods.actuallyadditions.BallOfFur.removeReturn(output);" },
      { "trigger": "addRecipe\tmods.actuallyadditions.Compost", "contents": "mods.actuallyadditions.Compost.addRecipe(output, outputDisplay, input, inputDisplay);" },
      { "trigger": "removeRecipe\tmods.actuallyadditions.Compost", "contents": "mods.actuallyadditions.Compost.removeRecipe(output);" },
      { "trigger": "addRecipe\tmods.actuallyadditions.Crusher", "contents": "mods.actuallyadditions.Crusher.addRecipe(output, input, optionalOutputSecondary, optionalOutputSecondaryChance);" },
      { "trigger": "removeRecipe\tmods.actuallyadditions.Crusher", "contents": "mods.actuallyadditions.Crusher.removeRecipe(output);" },
      { "trigger": "addRecipe\tmods.actuallyadditions.Empowerer", "contents": "mods.actuallyadditions.Empowerer.addRecipe(output, input, modifier1, modifier2, modifier3, modifier4, energyPerStand, time, optionalParticleColourArray[]);" },
      { "trigger": "removeRecipe\tmods.actuallyadditions.Empowerer", "contents": "mods.actuallyadditions.Empowerer.removeRecipe(output);" },
      { "trigger": "addStoneOre\tmods.actuallyadditions.MiningLens", "contents": "mods.actuallyadditions.MiningLens.addStoneOre(ore, weight);" },
      { "trigger": "addNetherOre\tmods.actuallyadditions.MiningLens", "contents": "mods.actuallyadditions.MiningLens.addNetherOre(ore, weight);" },
      { "trigger": "removeStoneOre\tmods.actuallyadditions.MiningLens", "contents": "mods.actuallyadditions.MiningLens.removeStoneOre(ore);" },
      { "trigger": "removeNetherOre\tmods.actuallyadditions.MiningLens", "contents": "mods.actuallyadditions.MiningLens.removeNetherOre(ore);" },
      { "trigger": "addRecipe\tmods.actuallyadditions.OilGen", "contents": "mods.actuallyadditions.OilGen.addRecipe(fluid, genAmount, optionalGenTime);" },
      { "trigger": "removeRecipe\tmods.actuallyadditions.OilGen", "contents": "mods.actuallyadditions.OilGen.removeRecipe(output);" },
      { "trigger": "addLoot\tmods.actuallyadditions.TreasureChest", "contents": "mods.actuallyadditions.TreasureChest.addLoot(returnItem, chance, minAmount, maxAmount);" },
      { "trigger": "removeLoot\tmods.actuallyadditions.TreasureChest", "contents": "mods.actuallyadditions.TreasureChest.removeLoot(returnItem);" },
      { "trigger": "addShaped\tmods.betterwithmods.Anvil", "contents": "mods.betterwithmods.Anvil.addShaped(output, inputs[][]);" },
      { "trigger": "addShapeless\tmods.betterwithmods.Anvil", "contents": "mods.betterwithmods.Anvil.addShapeless(output, inputs[]);" },
      { "trigger": "removeShaped\tmods.betterwithmods.Anvil", "contents": "mods.betterwithmods.Anvil.removeShaped(output, optionalIngredients[][]);" },
      { "trigger": "removeShapeless\tmods.betterwithmods.Anvil", "contents": "mods.betterwithmods.Anvil.removeShapeless(output, optionalIngredients[]);" },
      { "trigger": "set\tmods.betterwithmods.Buoyancy", "contents": "mods.betterwithmods.Buoyancy.set(stack, value);" },
      { "trigger": "add\tmods.betterwithmods.Cauldron", "contents": "mods.betterwithmods.Cauldron.add(output, optionalSecondaryOutput, inputs[]);" },
      { "trigger": "remove\tmods.betterwithmods.Cauldron", "contents": "mods.betterwithmods.Cauldron.remove(output);" },
      { "trigger": "remove\tmods.betterwithmods.Cauldron", "contents": "mods.betterwithmods.Cauldron.remove(output, optionalSecondary, inputs[]);" },
      { "trigger": "add\tmods.betterwithmods.Crucible", "contents": "mods.betterwithmods.Crucible.add(output, optionalSecondaryOutput, inputs[]);" },
      { "trigger": "remove\tmods.betterwithmods.Crucible", "contents": "mods.betterwithmods.Crucible.remove(output);" },
      { "trigger": "remove\tmods.betterwithmods.Crucible", "contents": "mods.betterwithmods.Crucible.remove(output, secondary, inputs[]);" },
      { "trigger": "add\tmods.betterwithmods.Kiln", "contents": "mods.betterwithmods.Kiln.add(output[], input);" },
      { "trigger": "add\tmods.betterwithmods.Kiln", "contents": "mods.betterwithmods.Kiln.add(output[], input);" },
      { "trigger": "remove\tmods.betterwithmods.Kiln", "contents": "mods.betterwithmods.Kiln.remove(input);" },
      { "trigger": "registerBlock\tmods.betterwithmods.Kiln", "contents": "mods.betterwithmods.Kiln.registerBlock(block);" },
      { "trigger": "add\tmods.betterwithmods.Mill", "contents": "mods.betterwithmods.Mill.add(output, optionalSecondaryOutput, inputs[]);" },
      { "trigger": "remove\tmods.betterwithmods.Mill", "contents": "mods.betterwithmods.Mill.remove(output);" },
      { "trigger": "remove\tmods.betterwithmods.Mill", "contents": "mods.betterwithmods.Mill.remove(output, inputs[]);" },
      { "trigger": "set\tmods.betterwithmods.Movement", "contents": "mods.betterwithmods.Movement.set(input, speed);" },
      { "trigger": "add\tmods.betterwithmods.Saw", "contents": "mods.betterwithmods.Saw.add(output[], input);" },
      { "trigger": "remove\tmods.betterwithmods.Saw", "contents": "mods.betterwithmods.Saw.remove(input);" },
      { "trigger": "add\tmods.betterwithmods.StokedCauldron", "contents": "mods.betterwithmods.StokedCauldron.add(output, optionalSecondaryOutput, inputs[]);" },
      { "trigger": "remove\tmods.betterwithmods.StokedCauldron", "contents": "mods.betterwithmods.StokedCauldron.remove(output);" },
      { "trigger": "remove\tmods.betterwithmods.StokedCauldron", "contents": "mods.betterwithmods.StokedCauldron.remove(output, inputs[]);" },
      { "trigger": "add\tmods.betterwithmods.StokedCrucible", "contents": "mods.betterwithmods.StokedCrucible.add(output, optionalSecondaryOutput, inputs[]);" },
      { "trigger": "remove\tmods.betterwithmods.StokedCrucible", "contents": "mods.betterwithmods.StokedCrucible.remove(output, optionalSecondary);" },
      { "trigger": "remove\tmods.betterwithmods.StokedCrucible", "contents": "mods.betterwithmods.StokedCrucible.remove(output, optionalSecondary, inputs[]);" },
      { "trigger": "add\tmods.betterwithmods.Turntable", "contents": "mods.betterwithmods.Turntable.add(inputBlock, outputBlock, additionalOutput[]);" },
      { "trigger": "remove\tmods.betterwithmods.Turntable", "contents": "mods.betterwithmods.Turntable.remove(inputBlock);" },
      { "trigger": "addRecipe\tmods.botania.Apothecary", "contents": "mods.botania.Apothecary.addRecipe(output, input[]);" },
      { "trigger": "addRecipe\tmods.botania.Apothecary", "contents": "mods.botania.Apothecary.addRecipe(output, input[]);" },
      { "trigger": "removeRecipe\tmods.botania.Apothecary", "contents": "mods.botania.Apothecary.removeRecipe(output);" },
      { "trigger": "removeRecipe\tmods.botania.Apothecary", "contents": "mods.botania.Apothecary.removeRecipe(output);" },
      { "trigger": "addRecipe\tmods.botania.Brew", "contents": "mods.botania.Brew.addRecipe(inputItems[], brewName);" },
      { "trigger": "removeRecipe\tmods.botania.Brew", "contents": "mods.botania.Brew.removeRecipe(brewName);" },
      { "trigger": "addRecipe\tmods.botania.ElvenTrade", "contents": "mods.botania.ElvenTrade.addRecipe(outputs[], input[]);" },
      { "trigger": "removeRecipe\tmods.botania.ElvenTrade", "contents": "mods.botania.ElvenTrade.removeRecipe(output);" },
      { "trigger": "addBrewPage\tmods.botania.Lexicon", "contents": "mods.botania.Lexicon.addBrewPage(name, entry, page_number, brew, recipe[], bottomText);" },
      { "trigger": "addCraftingPage\tmods.botania.Lexicon", "contents": "mods.botania.Lexicon.addCraftingPage(name, entry, page_number, recipeNames...);" },
      { "trigger": "addElvenPage\tmods.botania.Lexicon", "contents": "mods.botania.Lexicon.addElvenPage(name, entry, page_number, outputs[], inputs[][]);" },
      { "trigger": "addEntityPage\tmods.botania.Lexicon", "contents": "mods.botania.Lexicon.addEntityPage(name, entry, page_number, entity, size);" },
      { "trigger": "addImagePage\tmods.botania.Lexicon", "contents": "mods.botania.Lexicon.addImagePage(name, entry, page_number, resource);" },
      { "trigger": "addLorePage\tmods.botania.Lexicon", "contents": "mods.botania.Lexicon.addLorePage(name, entry, page_number);" },
      { "trigger": "addInfusionPage\tmods.botania.Lexicon", "contents": "mods.botania.Lexicon.addInfusionPage(name, entry, page_number, outputs[], inputs[], mana[]);" },
      { "trigger": "addAlchemyPage\tmods.botania.Lexicon", "contents": "mods.botania.Lexicon.addAlchemyPage(name, entry, page_number, outputs[], inputs[], mana[]);" },
      { "trigger": "addConjurationPage\tmods.botania.Lexicon", "contents": "mods.botania.Lexicon.addConjurationPage(name, entry, page_number, outputs[], inputs[], mana[]);" },
      { "trigger": "addPetalPage\tmods.botania.Lexicon", "contents": "mods.botania.Lexicon.addPetalPage(name, entry, page_number, outputs[], inputs[][]);" },
      { "trigger": "addRunePage\tmods.botania.Lexicon", "contents": "mods.botania.Lexicon.addRunePage(name, entry, page_number, outputs[], inputs[][], mana[]);" },
      { "trigger": "addTextPage\tmods.botania.Lexicon", "contents": "mods.botania.Lexicon.addTextPage(name, entry, page_number);" },
      { "trigger": "removePage\tmods.botania.Lexicon", "contents": "mods.botania.Lexicon.removePage(entry, page_number);" },
      { "trigger": "addEntry\tmods.botania.Lexicon", "contents": "mods.botania.Lexicon.addEntry(entry, catagory, stack);" },
      { "trigger": "removeEntry\tmods.botania.Lexicon", "contents": "mods.botania.Lexicon.removeEntry(entry);" },
      { "trigger": "setEntryKnowledgeType\tmods.botania.Lexicon", "contents": "mods.botania.Lexicon.setEntryKnowledgeType(entry, knowledgeType);" },
      { "trigger": "addCategory\tmods.botania.Lexicon", "contents": "mods.botania.Lexicon.addCategory(name);" },
      { "trigger": "removeCategory\tmods.botania.Lexicon", "contents": "mods.botania.Lexicon.removeCategory(name);" },
      { "trigger": "setCategoryPriority\tmods.botania.Lexicon", "contents": "mods.botania.Lexicon.setCategoryPriority(name, priority);" },
      { "trigger": "setCategoryIcon\tmods.botania.Lexicon", "contents": "mods.botania.Lexicon.setCategoryIcon(name, icon);" },
      { "trigger": "addRecipeMapping\tmods.botania.Lexicon", "contents": "mods.botania.Lexicon.addRecipeMapping(stack, Entry, page);" },
      { "trigger": "removeRecipeMapping\tmods.botania.Lexicon", "contents": "mods.botania.Lexicon.removeRecipeMapping(stack);" },
      { "trigger": "addInfusion\tmods.botania.ManaInfusion", "contents": "mods.botania.ManaInfusion.addInfusion(output, input, mana);" },
      { "trigger": "addAlchemy\tmods.botania.ManaInfusion", "contents": "mods.botania.ManaInfusion.addAlchemy(output, input, mana);" },
      { "trigger": "addConjuration\tmods.botania.ManaInfusion", "contents": "mods.botania.ManaInfusion.addConjuration(output, input, mana);" },
      { "trigger": "removeRecipe\tmods.botania.ManaInfusion", "contents": "mods.botania.ManaInfusion.removeRecipe(output);" },
      { "trigger": "addOre\tmods.botania.Orechid", "contents": "mods.botania.Orechid.addOre(oreDict, weight);" },
      { "trigger": "addOre\tmods.botania.Orechid", "contents": "mods.botania.Orechid.addOre(oreDict, weight);" },
      { "trigger": "removeOre\tmods.botania.Orechid", "contents": "mods.botania.Orechid.removeOre(oreDict);" },
      { "trigger": "removeOre\tmods.botania.Orechid", "contents": "mods.botania.Orechid.removeOre(oreDict);" },
      { "trigger": "addOre\tmods.botania.OrechidIgnem", "contents": "mods.botania.OrechidIgnem.addOre(oreDict, weight);" },
      { "trigger": "addOre\tmods.botania.OrechidIgnem", "contents": "mods.botania.OrechidIgnem.addOre(oreDict, weight);" },
      { "trigger": "removeOre\tmods.botania.OrechidIgnem", "contents": "mods.botania.OrechidIgnem.removeOre(oreDict);" },
      { "trigger": "removeOre\tmods.botania.OrechidIgnem", "contents": "mods.botania.OrechidIgnem.removeOre(oreDict);" },
      { "trigger": "addRecipe\tmods.botania.PureDaisy", "contents": "mods.botania.PureDaisy.addRecipe(blockInput, blockOutput, optionalTime);" },
      { "trigger": "removeRecipe\tmods.botania.PureDaisy", "contents": "mods.botania.PureDaisy.removeRecipe(output);" },
      { "trigger": "addRecipe\tmods.botania.RuneAltar", "contents": "mods.botania.RuneAltar.addRecipe(output, input[], mana);" },
      { "trigger": "removeRecipe\tmods.botania.RuneAltar", "contents": "mods.botania.RuneAltar.removeRecipe(output);" },
      { "trigger": "add\tmods.extrautils2.Crusher", "contents": "mods.extrautils2.Crusher.add(output, input, optionalSecondaryOutput, optionalSecondaryChance);" },
      { "trigger": "remove\tmods.extrautils2.Crusher", "contents": "mods.extrautils2.Crusher.remove(input);" },
      { "trigger": "add\tmods.extrautils2.Resonator", "contents": "mods.extrautils2.Resonator.add(output, input, energy, optionalAddOwnerTag);" },
      { "trigger": "remove\tmods.extrautils2.Resonator", "contents": "mods.extrautils2.Resonator.remove(output);" },
      { "trigger": "addRecipe\tmods.forestry.Carpenter", "contents": "mods.forestry.Carpenter.addRecipe(output, ingredients[][], packagingTime, optionalFluidInput, optionalBox);" },
      { "trigger": "removeRecipe\tmods.forestry.Carpenter", "contents": "mods.forestry.Carpenter.removeRecipe(output, optionalFluidInput);" },
      { "trigger": "addRecipe\tmods.forestry.Centrifuge", "contents": "mods.forestry.Centrifuge.addRecipe(output[], ingredients, packagingTime);" },
      { "trigger": "removeRecipe\tmods.forestry.Centrifuge", "contents": "mods.forestry.Centrifuge.removeRecipe(input);" },
      { "trigger": "addRecipe\tmods.forestry.Fermenter", "contents": "mods.forestry.Fermenter.addRecipe(fluidOutput, resource, fluidInput, fermentationValue, fluidOutputModifier);" },
      { "trigger": "removeRecipe\tmods.forestry.Fermenter", "contents": "mods.forestry.Fermenter.removeRecipe(input);" },
      { "trigger": "addFuel\tmods.forestry.Fermenter", "contents": "mods.forestry.Fermenter.addFuel(item, fermentPerCycle, burnDuration);" },
      { "trigger": "removeFuel\tmods.forestry.Fermenter", "contents": "mods.forestry.Fermenter.removeFuel(fermenterItem);" },
      { "trigger": "addRecipe\tmods.forestry.Moistener", "contents": "mods.forestry.Moistener.addRecipe(output, input, packagingTime);" },
      { "trigger": "removeRecipe\tmods.forestry.Moistener", "contents": "mods.forestry.Moistener.removeRecipe(output);" },
      { "trigger": "addFuel\tmods.forestry.Moistener", "contents": "mods.forestry.Moistener.addFuel(item, product, moistenerValue, stage);" },
      { "trigger": "removeFuel\tmods.forestry.Moistener", "contents": "mods.forestry.Moistener.removeFuel(moistenerItem);" },
      { "trigger": "addRecipe\tmods.forestry.Squeezer", "contents": "mods.forestry.Squeezer.addRecipe(fluidOutput, ingredients[], timePerItem, optionalItemOutput);" },
      { "trigger": "removeRecipe\tmods.forestry.Squeezer", "contents": "mods.forestry.Squeezer.removeRecipe(liquid, optionalIngredients[]);" },
      { "trigger": "addRecipe\tmods.forestry.Still", "contents": "mods.forestry.Still.addRecipe(fluidOutput, fluidInput, timePerUnit);" },
      { "trigger": "removeRecipe\tmods.forestry.Still", "contents": "mods.forestry.Still.removeRecipe(output, optionalFluidInput);" },
      { "trigger": "addSmelting\tmods.forestry.ThermionicFabricator", "contents": "mods.forestry.ThermionicFabricator.addSmelting(liquidStack, itemInput, meltingPoint);" },
      { "trigger": "addCast\tmods.forestry.ThermionicFabricator", "contents": "mods.forestry.ThermionicFabricator.addCast(output, ingredients[][], liquidStack, optionalPlan);" },
      { "trigger": "removeSmelting\tmods.forestry.ThermionicFabricator", "contents": "mods.forestry.ThermionicFabricator.removeSmelting(itemInput);" },
      { "trigger": "removeCast\tmods.forestry.ThermionicFabricator", "contents": "mods.forestry.ThermionicFabricator.removeCast(product);" },
      { "trigger": "addRecipe\tmods.tconstruct.Alloy", "contents": "mods.tconstruct.Alloy.addRecipe(output, inputs[]);" },
      { "trigger": "removeRecipe\tmods.tconstruct.Alloy", "contents": "mods.tconstruct.Alloy.removeRecipe(output, optionalInput[]);" },
      { "trigger": "addTableRecipe\tmods.tconstruct.Casting", "contents": "mods.tconstruct.Casting.addTableRecipe(output, cast, fluid, amount, optionalConsumeCast);" },
      { "trigger": "addBasinRecipe\tmods.tconstruct.Casting", "contents": "mods.tconstruct.Casting.addBasinRecipe(output, cast, fluid, amount, optionalConsumeCast);" },
      { "trigger": "removeTableRecipe\tmods.tconstruct.Casting", "contents": "mods.tconstruct.Casting.removeTableRecipe(output, optionalInput);" },
      { "trigger": "removeBasinRecipe\tmods.tconstruct.Casting", "contents": "mods.tconstruct.Casting.removeBasinRecipe(output, optionalInput);" },
      { "trigger": "addRecipe\tmods.tconstruct.Drying", "contents": "mods.tconstruct.Drying.addRecipe(output, input, time);" },
      { "trigger": "removeRecipe\tmods.tconstruct.Drying", "contents": "mods.tconstruct.Drying.removeRecipe(output, optionalInput);" },
      { "trigger": "registerFuel\tmods.tconstruct.Fuel", "contents": "mods.tconstruct.Fuel.registerFuel(fluid, duration);" },
      { "trigger": "addRecipe\tmods.tconstruct.Melting", "contents": "mods.tconstruct.Melting.addRecipe(output, input, optionalTemp);" },
      { "trigger": "addEntityMelting\tmods.tconstruct.Melting", "contents": "mods.tconstruct.Melting.addEntityMelting(entity, stack);" },
      { "trigger": "removeRecipe\tmods.tconstruct.Melting", "contents": "mods.tconstruct.Melting.removeRecipe(output, optionalInput);" },
      { "trigger": "removeEntityMelting\tmods.tconstruct.Melting", "contents": "mods.tconstruct.Melting.removeEntityMelting(entity);" },
      { "trigger": "addRecipe\tmods.thermalexpansion.Centrifuge", "contents": "mods.thermalexpansion.Centrifuge.addRecipe(outputs[], input, fluid, energy);" },
      { "trigger": "removeRecipe\tmods.thermalexpansion.Centrifuge", "contents": "mods.thermalexpansion.Centrifuge.removeRecipe(input);" },
      { "trigger": "addMintRecipe\tmods.thermalexpansion.Compactor", "contents": "mods.thermalexpansion.Compactor.addMintRecipe(output, input, energy);" },
      { "trigger": "addPressRecipe\tmods.thermalexpansion.Compactor", "contents": "mods.thermalexpansion.Compactor.addPressRecipe(output, input, energy);" },
      { "trigger": "addStorageRecipe\tmods.thermalexpansion.Compactor", "contents": "mods.thermalexpansion.Compactor.addStorageRecipe(output, input, energy);" },
      { "trigger": "removeMintRecipe\tmods.thermalexpansion.Compactor", "contents": "mods.thermalexpansion.Compactor.removeMintRecipe(input);" },
      { "trigger": "removePressRecipe\tmods.thermalexpansion.Compactor", "contents": "mods.thermalexpansion.Compactor.removePressRecipe(input);" },
      { "trigger": "removeStorageRecipe\tmods.thermalexpansion.Compactor", "contents": "mods.thermalexpansion.Compactor.removeStorageRecipe(input);" },
      { "trigger": "addRecipe\tmods.thermalexpansion.Crucible", "contents": "mods.thermalexpansion.Crucible.addRecipe(output, input, energy);" },
      { "trigger": "removeRecipe\tmods.thermalexpansion.Crucible", "contents": "mods.thermalexpansion.Crucible.removeRecipe(input);" },
      { "trigger": "addRecipe\tmods.thermalexpansion.InductionSmelter", "contents": "mods.thermalexpansion.InductionSmelter.addRecipe(primaryOutput, primaryInput, secondaryInput, energy, optionalSecondaryOutput, optionalSecondaryChance);" },
      { "trigger": "removeRecipe\tmods.thermalexpansion.InductionSmelter", "contents": "mods.thermalexpansion.InductionSmelter.removeRecipe(primaryInput, secondaryInput);" },
      { "trigger": "addRecipe\tmods.thermalexpansion.Infuser", "contents": "mods.thermalexpansion.Infuser.addRecipe(output, input, energy);" },
      { "trigger": "removeRecipe\tmods.thermalexpansion.Infuser", "contents": "mods.thermalexpansion.Infuser.removeRecipe(input);" },
      { "trigger": "addRecipe\tmods.thermalexpansion.Insolator", "contents": "mods.thermalexpansion.Insolator.addRecipe(primaryOutput, primaryInput, secondaryInput, energy, optionalSecondaryOutput, optionalSecondaryChance);" },
      { "trigger": "removeRecipe\tmods.thermalexpansion.Insolator", "contents": "mods.thermalexpansion.Insolator.removeRecipe(primaryInput, secondaryInput);" },
      { "trigger": "addRecipe\tmods.thermalexpansion.Pulverizer", "contents": "mods.thermalexpansion.Pulverizer.addRecipe(output, input, energy, optionalSecondaryOutput, optionalSecondaryChance);" },
      { "trigger": "removeRecipe\tmods.thermalexpansion.Pulverizer", "contents": "mods.thermalexpansion.Pulverizer.removeRecipe(input);" },
      { "trigger": "addRecipe\tmods.thermalexpansion.RedstoneFurnace", "contents": "mods.thermalexpansion.RedstoneFurnace.addRecipe(output, input, energy);" },
      { "trigger": "removeRecipe\tmods.thermalexpansion.RedstoneFurnace", "contents": "mods.thermalexpansion.RedstoneFurnace.removeRecipe(input);" },
      { "trigger": "addRecipe\tmods.thermalexpansion.Refinery", "contents": "mods.thermalexpansion.Refinery.addRecipe(output, outputItem, input, energy);" },
      { "trigger": "removeRecipe\tmods.thermalexpansion.Refinery", "contents": "mods.thermalexpansion.Refinery.removeRecipe(input);" },
      { "trigger": "addRecipe\tmods.thermalexpansion.Sawmill", "contents": "mods.thermalexpansion.Sawmill.addRecipe(output, input, energy, optionalSecondaryOutput, optionalSecondaryChance);" },
      { "trigger": "removeRecipe\tmods.thermalexpansion.Sawmill", "contents": "mods.thermalexpansion.Sawmill.removeRecipe(input);" },
      { "trigger": "addExtractRecipe\tmods.thermalexpansion.Transposer", "contents": "mods.thermalexpansion.Transposer.addExtractRecipe(output, input, energy, optionalItemOut);" },
      { "trigger": "removeExtractRecipe\tmods.thermalexpansion.Transposer", "contents": "mods.thermalexpansion.Transposer.removeExtractRecipe(input);" },
      { "trigger": "addFillRecipe\tmods.thermalexpansion.Transposer", "contents": "mods.thermalexpansion.Transposer.addFillRecipe(output, input, fluid, energy);" },
      { "trigger": "removeFillRecipe\tmods.thermalexpansion.Transposer", "contents": "mods.thermalexpansion.Transposer.removeFillRecipe(input, fluid);" },
      { "trigger": "addRitual\tmods.abyssalcraft.CreationRitual", "contents": "mods.abyssalcraft.CreationRitual.addRitual(unlocalizedName, bookType, dimension, requiredEnergy, requiresSacrifice, item, offerings...);" },
      { "trigger": "addRitual\tmods.abyssalcraft.CreationRitual", "contents": "mods.abyssalcraft.CreationRitual.addRitual(unlocalizedName, bookType, dimension, requiredEnergy, requiresSacrifice, item, offerings[], nbt);" },
      { "trigger": "removeRitual\tmods.abyssalcraft.CreationRitual", "contents": "mods.abyssalcraft.CreationRitual.removeRitual(item);" },
      { "trigger": "addCrystallization\tmods.abyssalcraft.Crystallizer", "contents": "mods.abyssalcraft.Crystallizer.addCrystallization(input, output1, output2, exp);" },
      { "trigger": "addSingleCrystallization\tmods.abyssalcraft.Crystallizer", "contents": "mods.abyssalcraft.Crystallizer.addSingleCrystallization(input, output, exp);" },
      { "trigger": "removeCrystallization\tmods.abyssalcraft.Crystallizer", "contents": "mods.abyssalcraft.Crystallizer.removeCrystallization(input);" },
      { "trigger": "addRitual\tmods.abyssalcraft.EnchantmentRitual", "contents": "mods.abyssalcraft.EnchantmentRitual.addRitual(unlocalizedName, bookType, dimension, requiredEnergy, requiresSacrifice, enchantment, offerings[]);" },
      { "trigger": "addRitual\tmods.abyssalcraft.EnchantmentRitual", "contents": "mods.abyssalcraft.EnchantmentRitual.addRitual(unlocalizedName, bookType, dimension, requiredEnergy, requiresSacrifice, enchantment, offerings[], nbt);" },
      { "trigger": "removeRitual\tmods.abyssalcraft.EnchantmentRitual", "contents": "mods.abyssalcraft.EnchantmentRitual.removeRitual(enchantment);" },
      { "trigger": "addRitual\tmods.abyssalcraft.InfusionRitual", "contents": "mods.abyssalcraft.InfusionRitual.addRitual(unlocalizedName, bookType, dimension, requiredEnergy, remnantHelp, item, sacrifice, offerings...);" },
      { "trigger": "addRitual\tmods.abyssalcraft.InfusionRitual", "contents": "mods.abyssalcraft.InfusionRitual.addRitual(unlocalizedName, bookType, dimension, requiredEnergy, remnantHelp, item, sacrifice, offerings[], nbt);" },
      { "trigger": "addRitual\tmods.abyssalcraft.InfusionRitual", "contents": "mods.abyssalcraft.InfusionRitual.addRitual(unlocalizedName, bookType, dimension, requiredEnergy, remnantHelp, item, sacrifice, offerings[], nbt, tags...);" },
      { "trigger": "removeRitual\tmods.abyssalcraft.InfusionRitual", "contents": "mods.abyssalcraft.InfusionRitual.removeRitual(item);" },
      { "trigger": "addChapter\tmods.abyssalcraft.necronomicon.internal", "contents": "mods.abyssalcraft.necronomicon.internal.addChapter(chapteridentifier, chaptertitle, necrodataidentifier);" },
      { "trigger": "removeChapter\tmods.abyssalcraft.necronomicon.internal", "contents": "mods.abyssalcraft.necronomicon.internal.removeChapter(chapteridentifier, necrodataidentifier);" },
      { "trigger": "addNormalPage\tmods.abyssalcraft.necronomicon.internal", "contents": "mods.abyssalcraft.necronomicon.internal.addNormalPage(pageNum, pagetext, chapteridentifier, necrodataidentifier);" },
      { "trigger": "addItemPage\tmods.abyssalcraft.necronomicon.internal", "contents": "mods.abyssalcraft.necronomicon.internal.addItemPage(pageNum, stack, pagetext, chapteridentifier, necrodataidentifier);" },
      { "trigger": "addImagePage\tmods.abyssalcraft.necronomicon.internal", "contents": "mods.abyssalcraft.necronomicon.internal.addImagePage(pageNum, resourcepath, pagetext, chapteridentifier, necrodataidentifier);" },
      { "trigger": "addCraftingPage\tmods.abyssalcraft.necronomicon.internal", "contents": "mods.abyssalcraft.necronomicon.internal.addCraftingPage(pageNum, thing, pagetext, chapteridentifier, necrodataidentifier);" },
      { "trigger": "addCraftingPage\tmods.abyssalcraft.necronomicon.internal", "contents": "mods.abyssalcraft.necronomicon.internal.addCraftingPage(pageNum, thing, stuff[], pagetext, chapteridentifier, necrodataidentifier);" },
      { "trigger": "addURLPage\tmods.abyssalcraft.necronomicon.internal", "contents": "mods.abyssalcraft.necronomicon.internal.addURLPage(pageNum, url, pagetext, chapteridentifier, necrodataidentifier);" },
      { "trigger": "removePage\tmods.abyssalcraft.necronomicon.internal", "contents": "mods.abyssalcraft.necronomicon.internal.removePage(pageNum, chapteridentifier, necrodataidentifier);" },
      { "trigger": "addRitual\tmods.abyssalcraft.PotionAoERitual", "contents": "mods.abyssalcraft.PotionAoERitual.addRitual(unlocalizedName, bookType, dimension, requiredEnergy, requiresSacrifice, potion, offerings[]);" },
      { "trigger": "addRitual\tmods.abyssalcraft.PotionAoERitual", "contents": "mods.abyssalcraft.PotionAoERitual.addRitual(unlocalizedName, bookType, dimension, requiredEnergy, requiresSacrifice, potion, offerings[], nbt);" },
      { "trigger": "removeRitual\tmods.abyssalcraft.PotionAoERitual", "contents": "mods.abyssalcraft.PotionAoERitual.removeRitual(potion);" },
      { "trigger": "addRitual\tmods.abyssalcraft.PotionRitual", "contents": "mods.abyssalcraft.PotionRitual.addRitual(unlocalizedName, bookType, dimension, requiredEnergy, requiresSacrifice, potion, offerings[]);" },
      { "trigger": "addRitual\tmods.abyssalcraft.PotionRitual", "contents": "mods.abyssalcraft.PotionRitual.addRitual(unlocalizedName, bookType, dimension, requiredEnergy, requiresSacrifice, potion, offerings[], nbt);" },
      { "trigger": "removeRitual\tmods.abyssalcraft.PotionRitual", "contents": "mods.abyssalcraft.PotionRitual.removeRitual(potion);" },
      { "trigger": "addShoggothFood\tmods.abyssalcraft.shoggoth", "contents": "mods.abyssalcraft.shoggoth.addShoggothFood(clazz);" },
      { "trigger": "addTransmutation\tmods.abyssalcraft.Transmutator", "contents": "mods.abyssalcraft.Transmutator.addTransmutation(input, output, exp);" },
      { "trigger": "removeTransmutation\tmods.abyssalcraft.Transmutator", "contents": "mods.abyssalcraft.Transmutator.removeTransmutation(input);" },
      { "trigger": "addUpgrade\tmods.abyssalcraft.UpgradeKit", "contents": "mods.abyssalcraft.UpgradeKit.addUpgrade(kit, input, output);" },
      { "trigger": "removeUpgrade\tmods.abyssalcraft.UpgradeKit", "contents": "mods.abyssalcraft.UpgradeKit.removeUpgrade(input);" },
      { "trigger": "addShapeless\tmods." + MODID + ".ChampionBench", "contents": "mods." + MODID + ".ChampionBench.addShapeless(output, ingredients[]);" },
      { "trigger": "addShaped\tmods." + MODID + ".ChampionBench", "contents": "mods." + MODID + ".ChampionBench.addShaped(output, ingredients[][]);" },
      { "trigger": "remove\tmods." + MODID + ".ChampionBench", "contents": "mods." + MODID + ".ChampionBench.remove(target);" },
      { "trigger": "addShapeless\tmods." + ArmorPlus.MODID + ".HighTechBench", "contents": "mods." + ArmorPlus.MODID + ".HighTechBench.addShapeless(output, ingredients[]);" },
      { "trigger": "addShaped\tmods." + ArmorPlus.MODID + ".HighTechBench", "contents": "mods." + ArmorPlus.MODID + ".HighTechBench.addShaped(output, ingredients[][]);" },
      { "trigger": "remove\tmods." + ArmorPlus.MODID + ".HighTechBench", "contents": "mods." + ArmorPlus.MODID + ".HighTechBench.remove(target);" },
      { "trigger": "addShapeless\tmods." + ArmorPlus.MODID + ".UltiTechBench", "contents": "mods." + ArmorPlus.MODID + ".UltiTechBench.addShapeless(output, ingredients[]);" },
      { "trigger": "addShaped\tmods." + ArmorPlus.MODID + ".UltiTechBench", "contents": "mods." + ArmorPlus.MODID + ".UltiTechBench.addShaped(output, ingredients[][]);" },
      { "trigger": "remove\tmods." + ArmorPlus.MODID + ".UltiTechBench", "contents": "mods." + ArmorPlus.MODID + ".UltiTechBench.remove(target);" },
      { "trigger": "addShapeless\tmods." + ArmorPlus.MODID + ".Workbench", "contents": "mods." + ArmorPlus.MODID + ".Workbench.addShapeless(output, ingredients[]);" },
      { "trigger": "addShaped\tmods." + ArmorPlus.MODID + ".Workbench", "contents": "mods." + ArmorPlus.MODID + ".Workbench.addShaped(output, ingredients[][]);" },
      { "trigger": "remove\tmods." + ArmorPlus.MODID + ".Workbench", "contents": "mods." + ArmorPlus.MODID + ".Workbench.remove(target);" },
      { "trigger": "addRecipe\tmods." + ArmorPlus.MODID + ".LavaInfuser", "contents": "mods." + ArmorPlus.MODID + ".LavaInfuser.addRecipe(output, input, xp);" },
      { "trigger": "remove\tmods." + ArmorPlus.MODID + ".LavaInfuser", "contents": "mods." + ArmorPlus.MODID + ".LavaInfuser.remove(target);" },
      { "trigger": "addEntity\tmods.armoreablemobs.ArmorGroup", "contents": "mods.armoreablemobs.ArmorGroup.addEntity(entity);" },
      { "trigger": "addArmor\tmods.armoreablemobs.ArmorGroup", "contents": "mods.armoreablemobs.ArmorGroup.addArmor(slot);" },
      { "trigger": "addGameStage\tmods.armoreablemobs.ArmorGroup", "contents": "mods.armoreablemobs.ArmorGroup.addGameStage(stage);" },
      { "trigger": "removeAltarRecipe\tmods.astralsorcery.Altar", "contents": "mods.astralsorcery.Altar.removeAltarRecipe(output, altarLevel);" },
      { "trigger": "addDiscoveryAltarRecipe\tmods.astralsorcery.Altar", "contents": "mods.astralsorcery.Altar.addDiscoveryAltarRecipe(output, starlightRequired, craftingTickTime, inputs[]);" },
      { "trigger": "addAttunmentAltarRecipe\tmods.astralsorcery.Altar", "contents": "mods.astralsorcery.Altar.addAttunmentAltarRecipe(output, starlightRequired, craftingTickTime, inputs[]);" },
      { "trigger": "addConstellationAltarRecipe\tmods.astralsorcery.Altar", "contents": "mods.astralsorcery.Altar.addConstellationAltarRecipe(output, starlightRequired, craftingTickTime, inputs[]);" },
      { "trigger": "addInfusion\tmods.astralsorcery.StarlightInfusion", "contents": "mods.astralsorcery.StarlightInfusion.addInfusion(input, output, consumeMultiple, consumptionChance, craftingTickTime);" },
      { "trigger": "removeInfusion\tmods.astralsorcery.StarlightInfusion", "contents": "mods.astralsorcery.StarlightInfusion.removeInfusion(output);" },
      { "trigger": "addTransmutation\tmods.astralsorcery.LightTransmutation", "contents": "mods.astralsorcery.LightTransmutation.addTransmutation(stackIn, stackOut, cost);" },
      { "trigger": "removeTransmutation\tmods.astralsorcery.LightTransmutation", "contents": "mods.astralsorcery.LightTransmutation.removeTransmutation(stackToRemove, matchMeta);" },
      { "trigger": "addOre\tmods.astralsorcery.RitualMineralis", "contents": "mods.astralsorcery.RitualMineralis.addOre(oreDictOreName, weight);" },
      { "trigger": "removeOre\tmods.astralsorcery.RitualMineralis", "contents": "mods.astralsorcery.RitualMineralis.removeOre(oreDictOreName);" },
      { "trigger": "removeLiquefaction\tmods.astralsorcery.Lightwell", "contents": "mods.astralsorcery.Lightwell.removeLiquefaction(input, output);" },
      { "trigger": "addLiquefaction\tmods.astralsorcery.Lightwell", "contents": "mods.astralsorcery.Lightwell.addLiquefaction(input, output, productionMultiplier, shatterMultiplier, colorhex);" },
      { "trigger": "blacklist\tmods.BadMobs", "contents": "mods.BadMobs.blacklist(dimId, entityId);" },
      { "trigger": "blacklist\tmods.BadMobs", "contents": "mods.BadMobs.blacklist(entityId);" },
      { "trigger": "addFollower\tmod.caravans.Caravan", "contents": "mod.caravans.Caravan.addFollower(caravan, merchant, optionalModelType);" },
      { "trigger": "registerCaravan\tmod.caravans.Caravan", "contents": "mod.caravans.Caravan.registerCaravan(name, optionalLeaderModel, optionalGamestage);" },
      { "trigger": "setEntityClassPath\tmods.caravans.Entity", "contents": "mods.caravans.Entity.setEntityClassPath(clazz);" },
      { "trigger": "setCustomInfo\tmods.caravans.Entity", "contents": "mods.caravans.Entity.setCustomInfo(tag);" },
      { "trigger": "setUnlocalizedName\tmods.contenttweaker.Item", "contents": "mods.contenttweaker.Item.setUnlocalizedName(unlocalizedName);" },
      { "trigger": "setMaxStackSize\tmods.contenttweaker.Item", "contents": "mods.contenttweaker.Item.setMaxStackSize(maxStackSize);" },
      { "trigger": "setRarity\tmods.contenttweaker.Item", "contents": "mods.contenttweaker.Item.setRarity(rarity);" },
      { "trigger": "setCreativeTab\tmods.contenttweaker.Item", "contents": "mods.contenttweaker.Item.setCreativeTab(creativeTab);" },
      { "trigger": "setSmeltingExperience\tmods.contenttweaker.Item", "contents": "mods.contenttweaker.Item.setSmeltingExperience(smeltingExperience);" },
      { "trigger": "setToolClass\tmods.contenttweaker.Item", "contents": "mods.contenttweaker.Item.setToolClass(toolClass);" },
      { "trigger": "setToolLevel\tmods.contenttweaker.Item", "contents": "mods.contenttweaker.Item.setToolLevel(toolLevel);" },
      { "trigger": "setBeaconPayment\tmods.contenttweaker.Item", "contents": "mods.contenttweaker.Item.setBeaconPayment(beaconPayment);" },
      { "trigger": "setItemRightClick\tmods.contenttweaker.Item", "contents": "mods.contenttweaker.Item.setItemRightClick(itemRightClick);" },
      { "trigger": "setItemUseAction\tmods.contenttweaker.Item", "contents": "mods.contenttweaker.Item.setItemUseAction(itemUseAction);" },
      { "trigger": "setGlowing\tmods.contenttweaker.Item", "contents": "mods.contenttweaker.Item.setGlowing(glowing);" },
      { "trigger": "setOnItemUse\tmods.contenttweaker.Item", "contents": "mods.contenttweaker.Item.setOnItemUse(itemUse);" },
      { "trigger": "setMaxDamage\tmods.contenttweaker.Item", "contents": "mods.contenttweaker.Item.setMaxDamage(maxDamage);" },
      { "trigger": "register\tmods.contenttweaker.Item", "contents": "mods.contenttweaker.Item.register();" },
      { "trigger": "setUnlocalizedName\tmods.contenttweaker.Block", "contents": "mods.contenttweaker.Block.setUnlocalizedName(unlocalizedName);" },
      { "trigger": "setCreativeTab\tmods.contenttweaker.Block", "contents": "mods.contenttweaker.Block.setCreativeTab(creativeTab);" },
      { "trigger": "setFullBlock\tmods.contenttweaker.Block", "contents": "mods.contenttweaker.Block.setFullBlock(fullBlock);" },
      { "trigger": "setLightOpacity\tmods.contenttweaker.Block", "contents": "mods.contenttweaker.Block.setLightOpacity(lightOpacity);" },
      { "trigger": "setTranslucent\tmods.contenttweaker.Block", "contents": "mods.contenttweaker.Block.setTranslucent(translucent);" },
      { "trigger": "setLightValue\tmods.contenttweaker.Block", "contents": "mods.contenttweaker.Block.setLightValue(lightValue);" },
      { "trigger": "setBlockHardness\tmods.contenttweaker.Block", "contents": "mods.contenttweaker.Block.setBlockHardness(blockHardness);" },
      { "trigger": "setBlockResistance\tmods.contenttweaker.Block", "contents": "mods.contenttweaker.Block.setBlockResistance(blockResistance);" },
      { "trigger": "setToolClass\tmods.contenttweaker.Block", "contents": "mods.contenttweaker.Block.setToolClass(toolClass);" },
      { "trigger": "setToolLevel\tmods.contenttweaker.Block", "contents": "mods.contenttweaker.Block.setToolLevel(toolLevel);" },
      { "trigger": "setBlockSoundType\tmods.contenttweaker.Block", "contents": "mods.contenttweaker.Block.setBlockSoundType(blockSoundType);" },
      { "trigger": "setBlockMaterial\tmods.contenttweaker.Block", "contents": "mods.contenttweaker.Block.setBlockMaterial(material);" },
      { "trigger": "setEnchantPowerBonus\tmods.contenttweaker.Block", "contents": "mods.contenttweaker.Block.setEnchantPowerBonus(enchantPowerBonus);" },
      { "trigger": "setEnumBlockRenderType\tmods.contenttweaker.Block", "contents": "mods.contenttweaker.Block.setEnumBlockRenderType(blockRenderType);" },
      { "trigger": "setSlipperiness\tmods.contenttweaker.Block", "contents": "mods.contenttweaker.Block.setSlipperiness(slipperiness);" },
      { "trigger": "setOnBlockBreak\tmods.contenttweaker.Block", "contents": "mods.contenttweaker.Block.setOnBlockBreak(iBlockAction);" },
      { "trigger": "setOnBlockPlace\tmods.contenttweaker.Block", "contents": "mods.contenttweaker.Block.setOnBlockPlace(iBlockAction);" },
      { "trigger": "setBlockLayer\tmods.contenttweaker.Block", "contents": "mods.contenttweaker.Block.setBlockLayer(blockLayer);" },
      { "trigger": "setAxisAlignedBB\tmods.contenttweaker.Block", "contents": "mods.contenttweaker.Block.setAxisAlignedBB(axisAlignedBB);" },
      { "trigger": "setOnUpdateTick\tmods.contenttweaker.Block", "contents": "mods.contenttweaker.Block.setOnUpdateTick(onUpdateTick);" },
      { "trigger": "setOnRandomTick\tmods.contenttweaker.Block", "contents": "mods.contenttweaker.Block.setOnRandomTick(onRandomTick);" },
      { "trigger": "setMobilityFlag\tmods.contenttweaker.Block", "contents": "mods.contenttweaker.Block.setMobilityFlag(mobilityFlag);" },
      { "trigger": "register\tmods.contenttweaker.Block", "contents": "mods.contenttweaker.Block.register();" },
      { "trigger": "setUnlocalizedName\tmods.contenttweaker.Fluid", "contents": "mods.contenttweaker.Fluid.setUnlocalizedName(unlocalizedName);" },
      { "trigger": "setDensity\tmods.contenttweaker.Fluid", "contents": "mods.contenttweaker.Fluid.setDensity(density);" },
      { "trigger": "setGaseous\tmods.contenttweaker.Fluid", "contents": "mods.contenttweaker.Fluid.setGaseous(gaseous);" },
      { "trigger": "setLuminosity\tmods.contenttweaker.Fluid", "contents": "mods.contenttweaker.Fluid.setLuminosity(luminosity);" },
      { "trigger": "setTemperature\tmods.contenttweaker.Fluid", "contents": "mods.contenttweaker.Fluid.setTemperature(temperature);" },
      { "trigger": "setColor\tmods.contenttweaker.Fluid", "contents": "mods.contenttweaker.Fluid.setColor(color);" },
      { "trigger": "setColorize\tmods.contenttweaker.Fluid", "contents": "mods.contenttweaker.Fluid.setColorize(colorize);" },
      { "trigger": "setStillLocation\tmods.contenttweaker.Fluid", "contents": "mods.contenttweaker.Fluid.setStillLocation(stillLocation);" },
      { "trigger": "setFlowingLocation\tmods.contenttweaker.Fluid", "contents": "mods.contenttweaker.Fluid.setFlowingLocation(flowingLocation);" },
      { "trigger": "setRarity\tmods.contenttweaker.Fluid", "contents": "mods.contenttweaker.Fluid.setRarity(rarity);" },
      { "trigger": "setViscosity\tmods.contenttweaker.Fluid", "contents": "mods.contenttweaker.Fluid.setViscosity(viscosity);" },
      { "trigger": "setFillSound\tmods.contenttweaker.Fluid", "contents": "mods.contenttweaker.Fluid.setFillSound(fillSound);" },
      { "trigger": "setEmptySound\tmods.contenttweaker.Fluid", "contents": "mods.contenttweaker.Fluid.setEmptySound(emptySound);" },
      { "trigger": "setVaporize\tmods.contenttweaker.Fluid", "contents": "mods.contenttweaker.Fluid.setVaporize(vaporize);" },
      { "trigger": "setMaterial\tmods.contenttweaker.Fluid", "contents": "mods.contenttweaker.Fluid.setMaterial(material);" },
      { "trigger": "register\tmods.contenttweaker.Fluid", "contents": "mods.contenttweaker.Fluid.register();" },
      { "trigger": "register\tmods.contenttweaker.CreativeTab", "contents": "mods.contenttweaker.CreativeTab.register();" },
      { "trigger": "createParticle\tmods.contenttweaker.Particles", "contents": "mods.contenttweaker.Particles.createParticle(world, particleName);" },
      { "trigger": "doFireParticles\tmods.contenttweaker.Particles", "contents": "mods.contenttweaker.Particles.doFireParticles(world);" },
      { "trigger": "doEnderChestParticles\tmods.contenttweaker.Particles", "contents": "mods.contenttweaker.Particles.doEnderChestParticles(world);" },
      { "trigger": "call\tmods.contenttweaker.Commands", "contents": "mods.contenttweaker.Commands.call(command, player, world);" },
      { "trigger": "call\tmods.contenttweaker.Commands", "contents": "mods.contenttweaker.Commands.call(command, player, world, logToChat, overridePermissions);" },
      { "trigger": "setData\tmods.contenttweaker.PartType", "contents": "mods.contenttweaker.PartType.setData(data[]);" },
      { "trigger": "setTextureLocation\tmods.contenttweaker.MaterialPart", "contents": "mods.contenttweaker.MaterialPart.setTextureLocation(textureLocation);" },
      { "trigger": "setColorized\tmods.contenttweaker.MaterialPart", "contents": "mods.contenttweaker.MaterialPart.setColorized(colorized);" },
      { "trigger": "addDataValue\tmods.contenttweaker.MaterialPartData", "contents": "mods.contenttweaker.MaterialPartData.addDataValue(name, value);" },
      { "trigger": "setTextureLocation\tmods.contenttweaker.MaterialPart", "contents": "mods.contenttweaker.MaterialPart.setTextureLocation(textureLocation);" },
      { "trigger": "setColorized\tmods.contenttweaker.MaterialPart", "contents": "mods.contenttweaker.MaterialPart.setColorized(colorized);" },
      { "trigger": "setCount\tmods.contenttweaker.MutableItemStack", "contents": "mods.contenttweaker.MutableItemStack.setCount(count);" },
      { "trigger": "shrink\tmods.contenttweaker.MutableItemStack", "contents": "mods.contenttweaker.MutableItemStack.shrink(count);" },
      { "trigger": "grow\tmods.contenttweaker.MutableItemStack", "contents": "mods.contenttweaker.MutableItemStack.grow(count);" },
      { "trigger": "damage\tmods.contenttweaker.MutableItemStack", "contents": "mods.contenttweaker.MutableItemStack.damage(amount, player);" },
      { "trigger": "setMinX\tmods.contenttweaker.AxisAlignedBB", "contents": "mods.contenttweaker.AxisAlignedBB.setMinX(minX);" },
      { "trigger": "setMinY\tmods.contenttweaker.AxisAlignedBB", "contents": "mods.contenttweaker.AxisAlignedBB.setMinY(minY);" },
      { "trigger": "setMinZ\tmods.contenttweaker.AxisAlignedBB", "contents": "mods.contenttweaker.AxisAlignedBB.setMinZ(minZ);" },
      { "trigger": "setMaxX\tmods.contenttweaker.AxisAlignedBB", "contents": "mods.contenttweaker.AxisAlignedBB.setMaxX(maxX);" },
      { "trigger": "setMaxY\tmods.contenttweaker.AxisAlignedBB", "contents": "mods.contenttweaker.AxisAlignedBB.setMaxY(maxY);" },
      { "trigger": "setMaxZ\tmods.contenttweaker.AxisAlignedBB", "contents": "mods.contenttweaker.AxisAlignedBB.setMaxZ(maxZ);" },
      { "trigger": "addRecipe\tmods.crossroads.FluidCoolingChamber", "contents": "mods.crossroads.FluidCoolingChamber.addRecipe(output, input, maxTemp, heatAdded);" },
      { "trigger": "removeRecipe\tmods.crossroads.FluidCoolingChamber", "contents": "mods.crossroads.FluidCoolingChamber.removeRecipe(input);" },
      { "trigger": "addRecipe\tmods.crossroads.Grindstone", "contents": "mods.crossroads.Grindstone.addRecipe(input, output1, optionalOutput2, optionalOutput3);" },
      { "trigger": "addRecipe\tmods.crossroads.Grindstone", "contents": "mods.crossroads.Grindstone.addRecipe(input, output1, optionalOutput2, optionalOutput3);" },
      { "trigger": "removeRecipe\tmods.crossroads.Grindstone", "contents": "mods.crossroads.Grindstone.removeRecipe(input);" },
      { "trigger": "removeRecipe\tmods.crossroads.Grindstone", "contents": "mods.crossroads.Grindstone.removeRecipe(input);" },
      { "trigger": "addDimensionStage\tmods.DimensionStages", "contents": "mods.DimensionStages.addDimensionStage(stage, id);" },
      { "trigger": "addRecipe\tmods.extendedcrafting.CombinationCrafting", "contents": "mods.extendedcrafting.CombinationCrafting.addRecipe(output, cost, input, ingredients[]);" },
      { "trigger": "addRecipe\tmods.extendedcrafting.CombinationCrafting", "contents": "mods.extendedcrafting.CombinationCrafting.addRecipe(output, cost, perTick, input, ingredients[]);" },
      { "trigger": "remove\tmods.extendedcrafting.CombinationCrafting", "contents": "mods.extendedcrafting.CombinationCrafting.remove(target);" },
      { "trigger": "addRecipe\tmods.extendedcrafting.CompressionCrafting", "contents": "mods.extendedcrafting.CompressionCrafting.addRecipe(output, input, inputCount, catalyst, powerCost);" },
      { "trigger": "addRecipe\tmods.extendedcrafting.CompressionCrafting", "contents": "mods.extendedcrafting.CompressionCrafting.addRecipe(output, input, inputCount, catalyst, powerCost, powerRate);" },
      { "trigger": "remove\tmods.extendedcrafting.CompressionCrafting", "contents": "mods.extendedcrafting.CompressionCrafting.remove(target);" },
      { "trigger": "addShaped\tmods.extendedcrafting.TableCrafting", "contents": "mods.extendedcrafting.TableCrafting.addShaped(output, ingredients[][]);" },
      { "trigger": "addShaped\tmods.extendedcrafting.TableCrafting", "contents": "mods.extendedcrafting.TableCrafting.addShaped(tier, output, ingredients[][]);" },
      { "trigger": "addShapeless\tmods.extendedcrafting.TableCrafting", "contents": "mods.extendedcrafting.TableCrafting.addShapeless(output, ingredients[]);" },
      { "trigger": "addShapeless\tmods.extendedcrafting.TableCrafting", "contents": "mods.extendedcrafting.TableCrafting.addShapeless(tier, output, ingredients[]);" },
      { "trigger": "remove\tmods.extendedcrafting.TableCrafting", "contents": "mods.extendedcrafting.TableCrafting.remove(target);" },
      { "trigger": "addRecipe\tmods.gregtech.AlloySmelter", "contents": "mods.gregtech.AlloySmelter.addRecipe(output, input1, input2, durationTicks, euPerTick);" },
      { "trigger": "addRecipe\tmods.gregtech.Amplifabricator", "contents": "mods.gregtech.Amplifabricator.addRecipe(input, duration, amount);" },
      { "trigger": "addRecipe\tmods.gregtech.ArcFurnace", "contents": "mods.gregtech.ArcFurnace.addRecipe(outputs[], input, fluidInput, outChances[], durationTicks, euPerTick);" },
      { "trigger": "addRecipe\tmods.gregtech.Assembler", "contents": "mods.gregtech.Assembler.addRecipe(output, input1, input2, fluidInput, durationTicks, euPerTick);" },
      { "trigger": "addRecipe\tmods.gregtech.Assembler", "contents": "mods.gregtech.Assembler.addRecipe(output, input1, input2, durationTicks, euPerTick);" },
      { "trigger": "addRecipe\tmods.gregtech.Assembler", "contents": "mods.gregtech.Assembler.addRecipe(output, inputs[], fluidInput, durationTicks, euPerTick);" },
      { "trigger": "addRecipe\tmods.gregtech.AssemblyLine", "contents": "mods.gregtech.AssemblyLine.addRecipe(aResearchItem, aResearchTime, aInputs[], aFluidInputs[], aOutput, aDuration, aEUt);" },
      { "trigger": "addRecipe\tmods.gregtech.Autoclave", "contents": "mods.gregtech.Autoclave.addRecipe(output, input, fluidInput, chances, durationTicks, euPerTick);" },
      { "trigger": "addRecipe\tmods.gregtech.BlastFurnace", "contents": "mods.gregtech.BlastFurnace.addRecipe(output[], fluidInput, input[], durationTicks, euPerTick, heat);" },
      { "trigger": "addRecipe\tmods.gregtech.BlastFurnace", "contents": "mods.gregtech.BlastFurnace.addRecipe(output[], input[], durationTicks, euPerTick, heat);" },
      { "trigger": "addRecipe\tmods.gregtech.Brewery", "contents": "mods.gregtech.Brewery.addRecipe(output, ingredient, input, hidden);" },
      { "trigger": "addRecipe\tmods.gregtech.Canner", "contents": "mods.gregtech.Canner.addRecipe(output, input1, input2, durationTicks, euPerTick);" },
      { "trigger": "addRecipe\tmods.gregtech.Canner", "contents": "mods.gregtech.Canner.addRecipe(output[], input1, input2, durationTicks, euPerTick);" },
      { "trigger": "addRecipe\tmods.gregtech.Centrifuge", "contents": "mods.gregtech.Centrifuge.addRecipe(outputs[], fluidOutput, input1, input2, fluidInput, chances[], durationTicks, euPerTick);" },
      { "trigger": "addRecipeFuelCan\tmods.gregtech.Centrifuge", "contents": "mods.gregtech.Centrifuge.addRecipeFuelCan(outputs[], input, numCans, duration);" },
      { "trigger": "addRecipe\tmods.gregtech.Centrifuge", "contents": "mods.gregtech.Centrifuge.addRecipe(outputs[], input, cells, durationTicks);" },
      { "trigger": "addRecipe\tmods.gregtech.ChemicalBath", "contents": "mods.gregtech.ChemicalBath.addRecipe(output[], input, fluidInput, chances[], durationTicks, euPerTick);" },
      { "trigger": "addRecipe\tmods.gregtech.ChemicalReactor", "contents": "mods.gregtech.ChemicalReactor.addRecipe(output, fluidOutput, input1, input2, fluidInput, durationTicks, euPerTick);" },
      { "trigger": "addRecipe\tmods.gregtech.ChemicalReactor", "contents": "mods.gregtech.ChemicalReactor.addRecipe(output, fluidOutput, input1, input2, fluidInput, durationTicks);" },
      { "trigger": "addRecipe\tmods.gregtech.ChemicalReactor", "contents": "mods.gregtech.ChemicalReactor.addRecipe(output, input1, input2, durationTicks);" },
      { "trigger": "addRecipe\tmods.gregtech.CuttingSaw", "contents": "mods.gregtech.CuttingSaw.addRecipe(output1, output2, input, lubricant, durationTicks, euPerTick);" },
      { "trigger": "addRecipe\tmods.gregtech.CuttingSaw", "contents": "mods.gregtech.CuttingSaw.addRecipe(output[], input, lubricant, durationTicks, euPerTick);" },
      { "trigger": "addRecipe\tmods.gregtech.DistillationTower", "contents": "mods.gregtech.DistillationTower.addRecipe(fluidOutput[], itemOutput, fluidInput, durationTicks, euPerTick);" },
      { "trigger": "addRecipe\tmods.gregtech.Distillery", "contents": "mods.gregtech.Distillery.addRecipe(fluidOutput, circuit, fluidInput, durationTicks, euPerTick, hidden);" },
      { "trigger": "addRecipe\tmods.gregtech.Electrolyzer", "contents": "mods.gregtech.Electrolyzer.addRecipe(outputs[], fluidOutput, input, cells, fluidInput, chances[], durationTicks, euPerTick);" },
      { "trigger": "addRecipe\tmods.gregtech.Electrolyzer", "contents": "mods.gregtech.Electrolyzer.addRecipe(outputs[], input, cells, durationTicks, euPerTick);" },
      { "trigger": "addRecipe\tmods.gregtech.Extruder", "contents": "mods.gregtech.Extruder.addRecipe(output, input, shape, durationTicks, euPerTick);" },
      { "trigger": "addRecipe\tmods.gregtech.Fermenter", "contents": "mods.gregtech.Fermenter.addRecipe(fluidOutput, fluidInput, duration, hidden);" },
      { "trigger": "addRecipe\tmods.gregtech.FluidCanner", "contents": "mods.gregtech.FluidCanner.addRecipe(output, input, fluidOutput, fluidInput);" },
      { "trigger": "addRecipe\tmods.gregtech.FluidExtractor", "contents": "mods.gregtech.FluidExtractor.addRecipe(output, input, fluidOutput, durationTicks, euPerTick, chance);" },
      { "trigger": "addRecipe\tmods.gregtech.FluidHeater", "contents": "mods.gregtech.FluidHeater.addRecipe(fluidOutput, circuit, fluidInput, durationTicks, euPerTick);" },
      { "trigger": "addRecipe\tmods.gregtech.FluidSolidifier", "contents": "mods.gregtech.FluidSolidifier.addRecipe(output, mold, fluidInput, durationTicks, euPerTick);" },
      { "trigger": "addRecipe\tmods.gregtech.ForgeHammer", "contents": "mods.gregtech.ForgeHammer.addRecipe(output, input, durationTicks, euPerTick);" },
      { "trigger": "addRecipe\tmods.gregtech.FormingPress", "contents": "mods.gregtech.FormingPress.addRecipe(output, input1, input2, durationTicks, euPerTick);" },
      { "trigger": "addRecipe\tmods.gregtech.FusionReactor", "contents": "mods.gregtech.FusionReactor.addRecipe(fluidOutput, fluidInput1, fluidInput2, durationTicks, euPerTick, startEU);" },
      { "trigger": "addRecipe\tmods.gregtech.ImplosionCompressor", "contents": "mods.gregtech.ImplosionCompressor.addRecipe(output, input, tnt);" },
      { "trigger": "addRecipe\tmods.gregtech.ImplosionCompressor", "contents": "mods.gregtech.ImplosionCompressor.addRecipe(output[], input, tnt);" },
      { "trigger": "addRecipe\tmods.gregtech.Lathe", "contents": "mods.gregtech.Lathe.addRecipe(output, input, durationTicks, euPerTick);" },
      { "trigger": "addRecipe\tmods.gregtech.Lathe", "contents": "mods.gregtech.Lathe.addRecipe(outputs[], input, durationTicks, euPerTick);" },
      { "trigger": "addRecipe\tmods.gregtech.Mixer", "contents": "mods.gregtech.Mixer.addRecipe(output, fluidOutput, input[], fluidInput, durationTicks, euPerTick);" },
      { "trigger": "addRecipe\tmods.gregtech.Mixer", "contents": "mods.gregtech.Mixer.addRecipe(output, input[], durationTicks, euPerTick);" },
      { "trigger": "addRecipe\tmods.gregtech.OilCracker", "contents": "mods.gregtech.OilCracker.addRecipe(fluidOutput, fluidInput, durationTicks, euPerTick);" },
      { "trigger": "addRecipe\tmods.gregtech.Packer", "contents": "mods.gregtech.Packer.addRecipe(output, input1, input2, durationTicks, euPerTick);" },
      { "trigger": "addRecipe\tmods.gregtech.PlasmaArcFurnace", "contents": "mods.gregtech.PlasmaArcFurnace.addRecipe(outputs[], fluidOutput, input, fluidInput, outChances[], durationTicks, euPerTick);" },
      { "trigger": "addRecipe\tmods.gregtech.PlasmaArcFurnace", "contents": "mods.gregtech.PlasmaArcFurnace.addRecipe(outputs[], fluidOutput, input, outChances[], durationTicks, euPerTick);" },
      { "trigger": "addRecipe\tmods.gregtech.PlateBender", "contents": "mods.gregtech.PlateBender.addRecipe(output, input, durationTicks, euPerTick);" },
      { "trigger": "addRecipe\tmods.gregtech.Polarizer", "contents": "mods.gregtech.Polarizer.addRecipe(output, input, durationTicks, euPerTick);" },
      { "trigger": "addRecipe\tmods.gregtech.PrecisionLaser", "contents": "mods.gregtech.PrecisionLaser.addRecipe(output, input1, input2, durationTicks, euPerTick, cleanroom);" },
      { "trigger": "addRecipe\tmods.gregtech.PrecisionLaser", "contents": "mods.gregtech.PrecisionLaser.addRecipe(output, input1, input2, durationTicks, euPerTick);" },
      { "trigger": "addRecipe\tmods.gregtech.Printer", "contents": "mods.gregtech.Printer.addRecipe(output, input, dataStick, ink, durationTicks, euPerTick);" },
      { "trigger": "addRecipe\tmods.gregtech.Pulverizer", "contents": "mods.gregtech.Pulverizer.addRecipe(outputs[], input, outChances[], durationTicks, euPerTick);" },
      { "trigger": "addRecipe\tmods.gregtech.PyrolyseOven", "contents": "mods.gregtech.PyrolyseOven.addRecipe(output, fluidOutput, circuit, input, fluidInput, durationTicks, euPerTick);" },
      { "trigger": "addRecipe\tmods.gregtech.Separator", "contents": "mods.gregtech.Separator.addRecipe(output[], input, outChances[], durationTicks, euPerTick);" },
      { "trigger": "addRecipe\tmods.gregtech.Sifter", "contents": "mods.gregtech.Sifter.addRecipe(outputs[], input, outChances[], durationTicks, euPerTick);" },
      { "trigger": "addRecipe\tmods.gregtech.Slicer", "contents": "mods.gregtech.Slicer.addRecipe(output, input, blade, durationTicks, euPerTick);" },
      { "trigger": "addRecipe\tmods.gregtech.Unpacker", "contents": "mods.gregtech.Unpacker.addRecipe(output1, output2, input, durationTicks, euPerTick);" },
      { "trigger": "addRecipe\tmods.gregtech.VacuumFreezer", "contents": "mods.gregtech.VacuumFreezer.addRecipe(output, input, durationTicks);" },
      { "trigger": "addRecipe\tmods.gregtech.Wiremill", "contents": "mods.gregtech.Wiremill.addRecipe(output, input, durationTicks, euPerTick);" },
      { "trigger": "addDieselFuel\tmods.gregtech.Fuels", "contents": "mods.gregtech.Fuels.addDieselFuel(output, input, euPerMillibucket);" },
      { "trigger": "addGasTurbineFuel\tmods.gregtech.Fuels", "contents": "mods.gregtech.Fuels.addGasTurbineFuel(output, input, euPerMillibucket);" },
      { "trigger": "addThermalGeneratorFuel\tmods.gregtech.Fuels", "contents": "mods.gregtech.Fuels.addThermalGeneratorFuel(output, input, euPerMillibucket);" },
      { "trigger": "addDenseFluidFuel\tmods.gregtech.Fuels", "contents": "mods.gregtech.Fuels.addDenseFluidFuel(output, input, euPerMillibucket);" },
      { "trigger": "addPlasmaGeneratorFuel\tmods.gregtech.Fuels", "contents": "mods.gregtech.Fuels.addPlasmaGeneratorFuel(output, input, euPerMillibucket);" },
      { "trigger": "addMagicGeneratorFuel\tmods.gregtech.Fuels", "contents": "mods.gregtech.Fuels.addMagicGeneratorFuel(output, input, euPerMillibucket);" },
      { "trigger": "add\tmods.horsepower.ChoppingBlock", "contents": "mods.horsepower.ChoppingBlock.add(input, output, time, optionalHand);" },
      { "trigger": "remove\tmods.horsepower.ChoppingBlock", "contents": "mods.horsepower.ChoppingBlock.remove(output, optionalHand);" },
      { "trigger": "add\tmods.horsepower.Grindstone", "contents": "mods.horsepower.Grindstone.add(input, output, time, optionalHand, optionalSecondary, optionalSecondaryChance);" },
      { "trigger": "remove\tmods.horsepower.Grindstone", "contents": "mods.horsepower.Grindstone.remove(output, optionalHand);" },
      { "trigger": "add\tmods.horsepower.Press", "contents": "mods.horsepower.Press.add(input, output);" },
      { "trigger": "remove\tmods.horsepower.Press", "contents": "mods.horsepower.Press.remove(output);" },
      { "trigger": "addRecipe\tmods.immersiveengineering.AlloySmelter", "contents": "mods.immersiveengineering.AlloySmelter.addRecipe(output, first, second, time);" },
      { "trigger": "removeRecipe\tmods.immersiveengineering.AlloySmelter", "contents": "mods.immersiveengineering.AlloySmelter.removeRecipe(output);" },
      { "trigger": "addRecipe\tmods.immersiveengineering.ArcFurnace", "contents": "mods.immersiveengineering.ArcFurnace.addRecipe(output, input, slag, time, energyPerTick, optionalAdditives[], optionalSpecialRecipeType);" },
      { "trigger": "removeRecipe\tmods.immersiveengineering.ArcFurnace", "contents": "mods.immersiveengineering.ArcFurnace.removeRecipe(output);" },
      { "trigger": "addRecipe\tmods.immersiveengineering.BlastFurnace", "contents": "mods.immersiveengineering.BlastFurnace.addRecipe(output, input, time, optionalSlag);" },
      { "trigger": "removeRecipe\tmods.immersiveengineering.BlastFurnace", "contents": "mods.immersiveengineering.BlastFurnace.removeRecipe(output);" },
      { "trigger": "addFuel\tmods.immersiveengineering.BlastFurnace", "contents": "mods.immersiveengineering.BlastFurnace.addFuel(input, time);" },
      { "trigger": "removeFuel\tmods.immersiveengineering.BlastFurnace", "contents": "mods.immersiveengineering.BlastFurnace.removeFuel(output);" },
      { "trigger": "addRecipe\tmods.immersiveengineering.Blueprint", "contents": "mods.immersiveengineering.Blueprint.addRecipe(category, output, inputs[]);" },
      { "trigger": "removeRecipe\tmods.immersiveengineering.Blueprint", "contents": "mods.immersiveengineering.Blueprint.removeRecipe(output);" },
      { "trigger": "addRecipe\tmods.immersiveengineering.BottlingMachine", "contents": "mods.immersiveengineering.BottlingMachine.addRecipe(output, input, fluid);" },
      { "trigger": "removeRecipe\tmods.immersiveengineering.BottlingMachine", "contents": "mods.immersiveengineering.BottlingMachine.removeRecipe(output);" },
      { "trigger": "addRecipe\tmods.immersiveengineering.CokeOven", "contents": "mods.immersiveengineering.CokeOven.addRecipe(output, fuelOutput, input, time);" },
      { "trigger": "removeRecipe\tmods.immersiveengineering.CokeOven", "contents": "mods.immersiveengineering.CokeOven.removeRecipe(output);" },
      { "trigger": "addRecipe\tmods.immersiveengineering.Crusher", "contents": "mods.immersiveengineering.Crusher.addRecipe(output, input, energy, optionalSecondaryOutput, optionalSecondaryChance);" },
      { "trigger": "removeRecipe\tmods.immersiveengineering.Crusher", "contents": "mods.immersiveengineering.Crusher.removeRecipe(output);" },
      { "trigger": "addFuel\tmods.immersiveengineering.DieselHandler", "contents": "mods.immersiveengineering.DieselHandler.addFuel(fuel, time);" },
      { "trigger": "addDrillFuel\tmods.immersiveengineering.DieselHandler", "contents": "mods.immersiveengineering.DieselHandler.addDrillFuel(fuel);" },
      { "trigger": "removeFuel\tmods.immersiveengineering.DieselHandler", "contents": "mods.immersiveengineering.DieselHandler.removeFuel(fuel);" },
      { "trigger": "removeDrillFuel\tmods.immersiveengineering.DieselHandler", "contents": "mods.immersiveengineering.DieselHandler.removeDrillFuel(fuel);" },
      { "trigger": "addMineral\tmods.immersiveengineering.Excavator", "contents": "mods.immersiveengineering.Excavator.addMineral(name, mineralWeight, failChance, ores[], chances[], optionalDimensionWhitelist[], optionalBlacklist);" },
      { "trigger": "removeMineral\tmods.immersiveengineering.Excavator", "contents": "mods.immersiveengineering.Excavator.removeMineral(name);" },
      { "trigger": "addOre\tmods.immersiveengineering.Excavator", "contents": "mods.immersiveengineering.Excavator.addOre(ore, chance);" },
      { "trigger": "removeOre\tmods.immersiveengineering.Excavator", "contents": "mods.immersiveengineering.Excavator.removeOre(ore);" },
      { "trigger": "addRecipe\tmods.immersiveengineering.Fermenter", "contents": "mods.immersiveengineering.Fermenter.addRecipe(output, fluid, input, energy);" },
      { "trigger": "removeFluidRecipe\tmods.immersiveengineering.Fermenter", "contents": "mods.immersiveengineering.Fermenter.removeFluidRecipe(fluid);" },
      { "trigger": "removeItemRecipe\tmods.immersiveengineering.Fermenter", "contents": "mods.immersiveengineering.Fermenter.removeItemRecipe(stack);" },
      { "trigger": "removeByInput\tmods.immersiveengineering.Fermenter", "contents": "mods.immersiveengineering.Fermenter.removeByInput(stack);" },
      { "trigger": "addRecipe\tmods.immersiveengineering.MetalPress", "contents": "mods.immersiveengineering.MetalPress.addRecipe(output, input, mold, energy, optionalInputSize);" },
      { "trigger": "removeRecipe\tmods.immersiveengineering.MetalPress", "contents": "mods.immersiveengineering.MetalPress.removeRecipe(output);" },
      { "trigger": "removeRecipeByMold\tmods.immersiveengineering.MetalPress", "contents": "mods.immersiveengineering.MetalPress.removeRecipeByMold(mold);" },
      { "trigger": "addRecipe\tmods.immersiveengineering.Mixer", "contents": "mods.immersiveengineering.Mixer.addRecipe(output, fluidInput, itemInputs[], energy);" },
      { "trigger": "removeRecipe\tmods.immersiveengineering.Mixer", "contents": "mods.immersiveengineering.Mixer.removeRecipe(output);" },
      { "trigger": "addRecipe\tmods.immersiveengineering.Refinery", "contents": "mods.immersiveengineering.Refinery.addRecipe(output, input0, input1, energy);" },
      { "trigger": "removeRecipe\tmods.immersiveengineering.Refinery", "contents": "mods.immersiveengineering.Refinery.removeRecipe(output);" },
      { "trigger": "addRecipe\tmods.immersiveengineering.Squeezer", "contents": "mods.immersiveengineering.Squeezer.addRecipe(output, fluid, input, energy);" },
      { "trigger": "removeFluidRecipe\tmods.immersiveengineering.Squeezer", "contents": "mods.immersiveengineering.Squeezer.removeFluidRecipe(fluid);" },
      { "trigger": "removeItemRecipe\tmods.immersiveengineering.Squeezer", "contents": "mods.immersiveengineering.Squeezer.removeItemRecipe(stack);" },
      { "trigger": "removeByInput\tmods.immersiveengineering.Squeezer", "contents": "mods.immersiveengineering.Squeezer.removeByInput(stack);" },
      { "trigger": "add\tmods.industrialforegoing.BioReactor", "contents": "mods.industrialforegoing.BioReactor.add(input);" },
      { "trigger": "remove\tmods.industrialforegoing.BioReactor", "contents": "mods.industrialforegoing.BioReactor.remove(input);" },
      { "trigger": "add\tmods.industrialforegoing.LaserDrill", "contents": "mods.industrialforegoing.LaserDrill.add(meta, output, weight);" },
      { "trigger": "remove\tmods.industrialforegoing.LaserDrill", "contents": "mods.industrialforegoing.LaserDrill.remove(input);" },
      { "trigger": "add\tmods.industrialforegoing.SludgeRefiner", "contents": "mods.industrialforegoing.SludgeRefiner.add(output, weight);" },
      { "trigger": "remove\tmods.industrialforegoing.SludgeRefiner", "contents": "mods.industrialforegoing.SludgeRefiner.remove(output);" },
      { "trigger": "addStartingItem\tmods.initialinventory.InvHandler", "contents": "mods.initialinventory.InvHandler.addStartingItem(item);" },
      { "trigger": "addStartingItem\tmods.initialinventory.InvHandler", "contents": "mods.initialinventory.InvHandler.addStartingItem(item, slotID);" },
      { "trigger": "addItemStage\tmods.ItemStages", "contents": "mods.ItemStages.addItemStage(stage, input);" },
      { "trigger": "removeTable\tmods.ltt.LootTable", "contents": "mods.ltt.LootTable.removeTable(table);" },
      { "trigger": "removePool\tmods.ltt.LootTable", "contents": "mods.ltt.LootTable.removePool(table, pool);" },
      { "trigger": "removeEntry\tmods.ltt.LootTable", "contents": "mods.ltt.LootTable.removeEntry(table, pool, entry);" },
      { "trigger": "removeItem\tmods.ltt.LootTable", "contents": "mods.ltt.LootTable.removeItem(table, pool, item);" },
      { "trigger": "removeModEntry\tmods.ltt.LootTable", "contents": "mods.ltt.LootTable.removeModEntry(modid);" },
      { "trigger": "removeModItem\tmods.ltt.LootTable", "contents": "mods.ltt.LootTable.removeModItem(modid);" },
      { "trigger": "removeModTable\tmods.ltt.LootTable", "contents": "mods.ltt.LootTable.removeModTable(modid);" },
      { "trigger": "removeGlobalItem\tmods.ltt.LootTable", "contents": "mods.ltt.LootTable.removeGlobalItem(itemId);" },
      { "trigger": "addRecipe\tmods.mekanism.chemical.crystallizer", "contents": "mods.mekanism.chemical.crystallizer.addRecipe(gasInput, itemOutput);" },
      { "trigger": "removeRecipe\tmods.mekanism.chemical.crystallizer", "contents": "mods.mekanism.chemical.crystallizer.removeRecipe(itemOutput, optionalGasInput);" },
      { "trigger": "addRecipe\tmods.mekanism.chemical.dissolution", "contents": "mods.mekanism.chemical.dissolution.addRecipe(itemInput, gasOutput);" },
      { "trigger": "removeRecipe\tmods.mekanism.chemical.dissolution", "contents": "mods.mekanism.chemical.dissolution.removeRecipe(gasOutput, optionalItemInput);" },
      { "trigger": "addRecipe\tmods.mekanism.chemical.infuser", "contents": "mods.mekanism.chemical.infuser.addRecipe(leftGasInput, rightGasInput, gasOutput);" },
      { "trigger": "removeRecipe\tmods.mekanism.chemical.infuser", "contents": "mods.mekanism.chemical.infuser.removeRecipe(gasOutput, optionalLeftGasInput, optionalRightGasInput);" },
      { "trigger": "addRecipe\tmods.mekanism.chemical.injection", "contents": "mods.mekanism.chemical.injection.addRecipe(itemInput, gasInput, itemOutput);" },
      { "trigger": "removeRecipe\tmods.mekanism.chemical.injection", "contents": "mods.mekanism.chemical.injection.removeRecipe(itemOutput, optionalItemInput, optionalGasInput);" },
      { "trigger": "addRecipe\tmods.mekanism.chemical.oxidizer", "contents": "mods.mekanism.chemical.oxidizer.addRecipe(itemInput, gasOutput);" },
      { "trigger": "removeRecipe\tmods.mekanism.chemical.oxidizer", "contents": "mods.mekanism.chemical.oxidizer.removeRecipe(gasOutput, optionalItemInput);" },
      { "trigger": "addRecipe\tmods.mekanism.chemical.washer", "contents": "mods.mekanism.chemical.washer.addRecipe(gasInput, gasOutput);" },
      { "trigger": "removeRecipe\tmods.mekanism.chemical.washer", "contents": "mods.mekanism.chemical.washer.removeRecipe(gasOutput, optionalGasInput);" },
      { "trigger": "addRecipe\tmods.mekanism.combiner", "contents": "mods.mekanism.combiner.addRecipe(itemInput, gasInput, itemOutput);" },
      { "trigger": "addRecipe\tmods.mekanism.combiner", "contents": "mods.mekanism.combiner.addRecipe(itemInput, itemOutput);" },
      { "trigger": "removeRecipe\tmods.mekanism.combiner", "contents": "mods.mekanism.combiner.removeRecipe(itemOutput, optionalItemInput, optionalGasInput);" },
      { "trigger": "addRecipe\tmods.mekanism.compressor", "contents": "mods.mekanism.compressor.addRecipe(itemInput, itemOutput);" },
      { "trigger": "addRecipe\tmods.mekanism.compressor", "contents": "mods.mekanism.compressor.addRecipe(itemInput, gasInput, itemOutput);" },
      { "trigger": "removeRecipe\tmods.mekanism.compressor", "contents": "mods.mekanism.compressor.removeRecipe(itemOutput, optionalItemInput, optionalGasInput);" },
      { "trigger": "addRecipe\tmods.mekanism.crusher", "contents": "mods.mekanism.crusher.addRecipe(itemInput, itemOutput);" },
      { "trigger": "removeRecipe\tmods.mekanism.crusher", "contents": "mods.mekanism.crusher.removeRecipe(itemOutput, optionalItemInput);" },
      { "trigger": "addRecipe\tmods.mekanism.smelter", "contents": "mods.mekanism.smelter.addRecipe(itemInput, itemOutput);" },
      { "trigger": "removeRecipe\tmods.mekanism.smelter", "contents": "mods.mekanism.smelter.removeRecipe(itemInput, optionalItemOutput);" },
      { "trigger": "addRecipe\tmods.mekanism.enrichment", "contents": "mods.mekanism.enrichment.addRecipe(itemInput, itemOutput);" },
      { "trigger": "removeRecipe\tmods.mekanism.enrichment", "contents": "mods.mekanism.enrichment.removeRecipe(itemInput, optionalItemOutput);" },
      { "trigger": "addRecipe\tmods.mekanism.infuser", "contents": "mods.mekanism.infuser.addRecipe(infuseType, infuseAmount, itemInput, itemOutput);" },
      { "trigger": "removeRecipe\tmods.mekanism.infuser", "contents": "mods.mekanism.infuser.removeRecipe(itemOutput, optionalItemInput, optionalInfuseType);" },
      { "trigger": "addRecipe\tmods.mekanism.purification", "contents": "mods.mekanism.purification.addRecipe(itemInput, itemOutput);" },
      { "trigger": "addRecipe\tmods.mekanism.purification", "contents": "mods.mekanism.purification.addRecipe(itemInput, gasInput, itemOutput);" },
      { "trigger": "removeRecipe\tmods.mekanism.purification", "contents": "mods.mekanism.purification.removeRecipe(itemOutput, optionalItemInput, optionalGasInput);" },
      { "trigger": "addRecipe\tmods.mekanism.reaction", "contents": "mods.mekanism.reaction.addRecipe(itemInput, liquidInput, gasInput, itemOutput, gasOutput, energy, duration);" },
      { "trigger": "removeRecipe\tmods.mekanism.reaction", "contents": "mods.mekanism.reaction.removeRecipe(itemOutput, gasOutput, optionalItemInput, optionalLiquidInput, optionalGasInput);" },
      { "trigger": "addRecipe\tmods.mekanism.sawmill", "contents": "mods.mekanism.sawmill.addRecipe(itemInput, itemOutput, optionalOptionalItemOutput, optionalOptionalChance);" },
      { "trigger": "removeRecipe\tmods.mekanism.sawmill", "contents": "mods.mekanism.sawmill.removeRecipe(itemInput, optionalItemOutput, optionalOptionalItemOutput);" },
      { "trigger": "addRecipe\tmods.mekanism.separator", "contents": "mods.mekanism.separator.addRecipe(liquidInput, energy, leftGasOutput, rightGasOutput);" },
      { "trigger": "removeRecipe\tmods.mekanism.separator", "contents": "mods.mekanism.separator.removeRecipe(liquidInput, optionalLeftGasInput, optionalRightGasInput);" },
      { "trigger": "addRecipe\tmods.mekanism.solarneutronactivator", "contents": "mods.mekanism.solarneutronactivator.addRecipe(gasInput, gasOutput);" },
      { "trigger": "removeRecipe\tmods.mekanism.solarneutronactivator", "contents": "mods.mekanism.solarneutronactivator.removeRecipe(gasInput, optionalGasOutput);" },
      { "trigger": "addRecipe\tmods.mekanism.thermalevaporation", "contents": "mods.mekanism.thermalevaporation.addRecipe(liquidInput, liquidOutput);" },
      { "trigger": "removeRecipe\tmods.mekanism.thermalevaporation", "contents": "mods.mekanism.thermalevaporation.removeRecipe(liquidInput, optionalLiquidOutput);" },
      { "trigger": "addStage\tmods.MobStages", "contents": "mods.MobStages.addStage(stage, entityId);" },
      { "trigger": "addStage\tmods.MobStages", "contents": "mods.MobStages.addStage(stage, entityId, dimension);" },
      { "trigger": "addReplacement\tmods.MobStages", "contents": "mods.MobStages.addReplacement(entityId, replacementId);" },
      { "trigger": "addReplacement\tmods.MobStages", "contents": "mods.MobStages.addReplacement(entityId, replacementId, dimension);" },
      { "trigger": "addRange\tmods.MobStages", "contents": "mods.MobStages.addRange(entityId, range);" },
      { "trigger": "addReplacement\tmods.MobStages", "contents": "mods.MobStages.addReplacement(entityId, range, dimension);" },
      { "trigger": "toggleSpawner\tmods.MobStages", "contents": "mods.MobStages.toggleSpawner(entityId, allow);" },
      { "trigger": "toggleSpawner\tmods.MobStages", "contents": "mods.MobStages.toggleSpawner(entityId, allow, dimension);" },
      { "trigger": "addRecipe\tmods.nuclearcraft.manufactory", "contents": "mods.nuclearcraft.manufactory.addRecipe(input1, output1);" },
      { "trigger": "addRecipe\tmods.nuclearcraft.manufactory", "contents": "mods.nuclearcraft.manufactory.addRecipe(input1, output1, processTime);" },
      { "trigger": "removeRecipe\tmods.nuclearcraft.manufactory", "contents": "mods.nuclearcraft.manufactory.removeRecipe(output1);" },
      { "trigger": "addRecipe\tmods.nuclearcraft.manufactory", "contents": "mods.nuclearcraft.manufactory.addRecipe(input1, output1, output2);" },
      { "trigger": "addRecipe\tmods.nuclearcraft.manufactory", "contents": "mods.nuclearcraft.manufactory.addRecipe(input1, output1, output2, processTime);" },
      { "trigger": "removeRecipe\tmods.nuclearcraft.manufactory", "contents": "mods.nuclearcraft.manufactory.removeRecipe(output1, output2);" },
      { "trigger": "addRecipe\tmods.nuclearcraft.manufactory", "contents": "mods.nuclearcraft.manufactory.addRecipe(input1, output1);" },
      { "trigger": "addRecipe\tmods.nuclearcraft.manufactory", "contents": "mods.nuclearcraft.manufactory.addRecipe(input1, output1, processTime);" },
      { "trigger": "removeRecipe\tmods.nuclearcraft.manufactory", "contents": "mods.nuclearcraft.manufactory.removeRecipe(output1);" },
      { "trigger": "addRecipe\tmods.nuclearcraft.manufactory", "contents": "mods.nuclearcraft.manufactory.addRecipe(input1, output1, output2, output3, output4);" },
      { "trigger": "addRecipe\tmods.nuclearcraft.manufactory", "contents": "mods.nuclearcraft.manufactory.addRecipe(input1, output1, output2, output3, output4, processTime);" },
      { "trigger": "removeRecipe\tmods.nuclearcraft.manufactory", "contents": "mods.nuclearcraft.manufactory.removeRecipe(output1, output2, output3, output4);" },
      { "trigger": "addRecipe\tmods.nuclearcraft.manufactory", "contents": "mods.nuclearcraft.manufactory.addRecipe(input1, input2, output1);" },
      { "trigger": "addRecipe\tmods.nuclearcraft.manufactory", "contents": "mods.nuclearcraft.manufactory.addRecipe(input1, input2, output1, processTime);" },
      { "trigger": "removeRecipe\tmods.nuclearcraft.manufactory", "contents": "mods.nuclearcraft.manufactory.removeRecipe(output1);" },
      { "trigger": "addRecipe\tmods.nuclearcraft.manufactory", "contents": "mods.nuclearcraft.manufactory.addRecipe(input1, input2, output1);" },
      { "trigger": "addRecipe\tmods.nuclearcraft.manufactory", "contents": "mods.nuclearcraft.manufactory.addRecipe(input1, input2, output1, processTime);" },
      { "trigger": "removeRecipe\tmods.nuclearcraft.manufactory", "contents": "mods.nuclearcraft.manufactory.removeRecipe(output1);" },
      { "trigger": "addRecipe\tmods.nuclearcraft.manufactory", "contents": "mods.nuclearcraft.manufactory.addRecipe(input1, output1);" },
      { "trigger": "addRecipe\tmods.nuclearcraft.manufactory", "contents": "mods.nuclearcraft.manufactory.addRecipe(input1, output1, processTime);" },
      { "trigger": "removeRecipe\tmods.nuclearcraft.manufactory", "contents": "mods.nuclearcraft.manufactory.removeRecipe(output1);" },
      { "trigger": "addRecipe\tmods.nuclearcraft.manufactory", "contents": "mods.nuclearcraft.manufactory.addRecipe(input1, output1);" },
      { "trigger": "addRecipe\tmods.nuclearcraft.manufactory", "contents": "mods.nuclearcraft.manufactory.addRecipe(input1, output1, processTime);" },
      { "trigger": "removeRecipe\tmods.nuclearcraft.manufactory", "contents": "mods.nuclearcraft.manufactory.removeRecipe(output1);" },
      { "trigger": "addRecipe\tmods.nuclearcraft.manufactory", "contents": "mods.nuclearcraft.manufactory.addRecipe(input1, output1, output2, output3, output4);" },
      { "trigger": "addRecipe\tmods.nuclearcraft.manufactory", "contents": "mods.nuclearcraft.manufactory.addRecipe(input1, output1, output2, output3, output4, processTime);" },
      { "trigger": "removeRecipe\tmods.nuclearcraft.manufactory", "contents": "mods.nuclearcraft.manufactory.removeRecipe(output1, output2, output3, output4);" },
      { "trigger": "addRecipe\tmods.nuclearcraft.manufactory", "contents": "mods.nuclearcraft.manufactory.addRecipe(input1, input2, output1, output2);" },
      { "trigger": "addRecipe\tmods.nuclearcraft.manufactory", "contents": "mods.nuclearcraft.manufactory.addRecipe(input1, input2, output1, output2, processTime);" },
      { "trigger": "removeRecipe\tmods.nuclearcraft.manufactory", "contents": "mods.nuclearcraft.manufactory.removeRecipe(output1, output2);" },
      { "trigger": "addRecipe\tmods.nuclearcraft.manufactory", "contents": "mods.nuclearcraft.manufactory.addRecipe(input1, output1);" },
      { "trigger": "addRecipe\tmods.nuclearcraft.manufactory", "contents": "mods.nuclearcraft.manufactory.addRecipe(input1, output1, processTime);" },
      { "trigger": "removeRecipe\tmods.nuclearcraft.manufactory", "contents": "mods.nuclearcraft.manufactory.removeRecipe(output1);" },
      { "trigger": "addRecipe\tmods.nuclearcraft.manufactory", "contents": "mods.nuclearcraft.manufactory.addRecipe(input1, output1);" },
      { "trigger": "addRecipe\tmods.nuclearcraft.manufactory", "contents": "mods.nuclearcraft.manufactory.addRecipe(input1, output1, processTime);" },
      { "trigger": "removeRecipe\tmods.nuclearcraft.manufactory", "contents": "mods.nuclearcraft.manufactory.removeRecipe(output1);" },
      { "trigger": "addRecipe\tmods.nuclearcraft.manufactory", "contents": "mods.nuclearcraft.manufactory.addRecipe(input1, input2, output1, output2);" },
      { "trigger": "addRecipe\tmods.nuclearcraft.manufactory", "contents": "mods.nuclearcraft.manufactory.addRecipe(input1, input2, output1, output2, processTime);" },
      { "trigger": "removeRecipe\tmods.nuclearcraft.manufactory", "contents": "mods.nuclearcraft.manufactory.removeRecipe(output1, output2);" },
      { "trigger": "addRecipe\tmods.nuclearcraft.manufactory", "contents": "mods.nuclearcraft.manufactory.addRecipe(input1, input2, output1);" },
      { "trigger": "addRecipe\tmods.nuclearcraft.manufactory", "contents": "mods.nuclearcraft.manufactory.addRecipe(input1, input2, output1, processTime);" },
      { "trigger": "removeRecipe\tmods.nuclearcraft.manufactory", "contents": "mods.nuclearcraft.manufactory.removeRecipe(output1);" },
      { "trigger": "addRecipe\tmods.nuclearcraft.manufactory", "contents": "mods.nuclearcraft.manufactory.addRecipe(input1, output1);" },
      { "trigger": "addRecipe\tmods.nuclearcraft.manufactory", "contents": "mods.nuclearcraft.manufactory.addRecipe(input1, output1, processTime);" },
      { "trigger": "removeRecipe\tmods.nuclearcraft.manufactory", "contents": "mods.nuclearcraft.manufactory.removeRecipe(output1);" },
      { "trigger": "addRecipe\tmods.nuclearcraft.manufactory", "contents": "mods.nuclearcraft.manufactory.addRecipe(input1, input2, output1);" },
      { "trigger": "addRecipe\tmods.nuclearcraft.manufactory", "contents": "mods.nuclearcraft.manufactory.addRecipe(input1, input2, output1, processTime);" },
      { "trigger": "removeRecipe\tmods.nuclearcraft.manufactory", "contents": "mods.nuclearcraft.manufactory.removeRecipe(output1);" },
      { "trigger": "addRecipe\tmods.nuclearcraft.manufactory", "contents": "mods.nuclearcraft.manufactory.addRecipe(input1, output1, fuelTime, power, heat, name);" },
      { "trigger": "removeRecipe\tmods.nuclearcraft.manufactory", "contents": "mods.nuclearcraft.manufactory.removeRecipe(output1);" },
      { "trigger": "addRecipe\tmods.nuclearcraft.manufactory", "contents": "mods.nuclearcraft.manufactory.addRecipe(input1, input2, output1, output2, output3, output4, fuelTime, power, heatVar);" },
      { "trigger": "removeRecipe\tmods.nuclearcraft.manufactory", "contents": "mods.nuclearcraft.manufactory.removeRecipe(output1, output2, output3, output4);" },
      { "trigger": "addDrillRecipe\tmods.pneumaticcraft.assembly", "contents": "mods.pneumaticcraft.assembly.addDrillRecipe(input, output);" },
      { "trigger": "addLaserRecipe\tmods.pneumaticcraft.assembly", "contents": "mods.pneumaticcraft.assembly.addLaserRecipe(input, output);" },
      { "trigger": "addDrillLaserRecipe\tmods.pneumaticcraft.assembly", "contents": "mods.pneumaticcraft.assembly.addDrillLaserRecipe(input, output);" },
      { "trigger": "removeDrillRecipe\tmods.pneumaticcraft.assembly", "contents": "mods.pneumaticcraft.assembly.removeDrillRecipe(output);" },
      { "trigger": "removeAllDrillRecipes\tmods.pneumaticcraft.assembly", "contents": "mods.pneumaticcraft.assembly.removeAllDrillRecipes();" },
      { "trigger": "removeLaserRecipe\tmods.pneumaticcraft.assembly", "contents": "mods.pneumaticcraft.assembly.removeLaserRecipe(output);" },
      { "trigger": "removeAllLaserRecipes\tmods.pneumaticcraft.assembly", "contents": "mods.pneumaticcraft.assembly.removeAllLaserRecipes();" },
      { "trigger": "removeDrillLaserRecipe\tmods.pneumaticcraft.assembly", "contents": "mods.pneumaticcraft.assembly.removeDrillLaserRecipe(output);" },
      { "trigger": "removeAllDrillLaserRecipes\tmods.pneumaticcraft.assembly", "contents": "mods.pneumaticcraft.assembly.removeAllDrillLaserRecipes();" },
      { "trigger": "removeAllRecipes\tmods.pneumaticcraft.assembly", "contents": "mods.pneumaticcraft.assembly.removeAllRecipes();" },
      { "trigger": "addRecipe\tmods.pneumaticcraft.heatframecooling", "contents": "mods.pneumaticcraft.heatframecooling.addRecipe(input, output);" },
      { "trigger": "addRecipe\tmods.pneumaticcraft.heatframecooling", "contents": "mods.pneumaticcraft.heatframecooling.addRecipe(input, output);" },
      { "trigger": "removeRecipe\tmods.pneumaticcraft.heatframecooling", "contents": "mods.pneumaticcraft.heatframecooling.removeRecipe(output);" },
      { "trigger": "removeAllRecipes\tmods.pneumaticcraft.heatframecooling", "contents": "mods.pneumaticcraft.heatframecooling.removeAllRecipes();" },
      { "trigger": "addRecipe\tmods.pneumaticcraft.pressurechamber", "contents": "mods.pneumaticcraft.pressurechamber.addRecipe(input[], pressure, output[]);" },
      { "trigger": "removeRecipe\tmods.pneumaticcraft.pressurechamber", "contents": "mods.pneumaticcraft.pressurechamber.removeRecipe(output[]);" },
      { "trigger": "removeAllRecipes\tmods.pneumaticcraft.pressurechamber", "contents": "mods.pneumaticcraft.pressurechamber.removeAllRecipes();" },
      { "trigger": "addRecipe\tmods.pneumaticcraft.refinery", "contents": "mods.pneumaticcraft.refinery.addRecipe(input, outputs[]);" },
      { "trigger": "removeRecipes\tmods.pneumaticcraft.refinery", "contents": "mods.pneumaticcraft.refinery.removeRecipes(input);" },
      { "trigger": "removeRecipe\tmods.pneumaticcraft.refinery", "contents": "mods.pneumaticcraft.refinery.removeRecipe(outputs[]);" },
      { "trigger": "removeAllRecipes\tmods.pneumaticcraft.refinery", "contents": "mods.pneumaticcraft.refinery.removeAllRecipes();" },
      { "trigger": "addRecipe\tmods.pneumaticcraft.thermopneumaticprocessingplant", "contents": "mods.pneumaticcraft.thermopneumaticprocessingplant.addRecipe(liquidInput, itemInput, pressure, temperature, output);" },
      { "trigger": "addRecipe\tmods.pneumaticcraft.thermopneumaticprocessingplant", "contents": "mods.pneumaticcraft.thermopneumaticprocessingplant.addRecipe(itemInput, pressure, temperature, output);" },
      { "trigger": "removeRecipe\tmods.pneumaticcraft.thermopneumaticprocessingplant", "contents": "mods.pneumaticcraft.thermopneumaticprocessingplant.removeRecipe(output);" },
      { "trigger": "removeAllRecipes\tmods.pneumaticcraft.thermopneumaticprocessingplant", "contents": "mods.pneumaticcraft.thermopneumaticprocessingplant.removeAllRecipes();" },
      { "trigger": "addShaped\tmods.recipestages.Recipes", "contents": "mods.recipestages.Recipes.addShaped(name, stage, output, ingredients[][], optionalFunction, optionalAction);" },
      { "trigger": "addShapedMirrored\tmods.recipestages.Recipes", "contents": "mods.recipestages.Recipes.addShapedMirrored(name, stage, output, ingredients[][], optionalFunction, optionalAction);" },
      { "trigger": "addShapeless\tmods.recipestages.Recipes", "contents": "mods.recipestages.Recipes.addShapeless(name, stage, output, ingredients[], optionalFunction, optionalAction);" },
      { "trigger": "addShaped\tmods.recipestages.Recipes", "contents": "mods.recipestages.Recipes.addShaped(stage, output, ingredients[][], optionalFunction, optionalAction);" },
      { "trigger": "addShapedMirrored\tmods.recipestages.Recipes", "contents": "mods.recipestages.Recipes.addShapedMirrored(stage, output, ingredients[][], optionalFunction, optionalAction);" },
      { "trigger": "addShapeless\tmods.recipestages.Recipes", "contents": "mods.recipestages.Recipes.addShapeless(stage, output, ingredients[], optionalFunction, optionalAction);" },
      { "trigger": "setRecipeStage\tmods.recipestages.Recipes", "contents": "mods.recipestages.Recipes.setRecipeStage(stage, output);" },
      { "trigger": "setRecipeStage\tmods.recipestages.Recipes", "contents": "mods.recipestages.Recipes.setRecipeStage(stage, recipeName);" },
      { "trigger": "addRecipe\tmods.techreborn.alloySmelter", "contents": "mods.techreborn.alloySmelter.addRecipe(output, input1, input2, ticktime, euTick);" },
      { "trigger": "removeInputRecipe\tmods.techreborn.alloySmelter", "contents": "mods.techreborn.alloySmelter.removeInputRecipe(iIngredient);" },
      { "trigger": "removeRecipe\tmods.techreborn.alloySmelter", "contents": "mods.techreborn.alloySmelter.removeRecipe(output);" },
      { "trigger": "addRecipe\tmods.techreborn.assemblingMachine", "contents": "mods.techreborn.assemblingMachine.addRecipe(output, input1, input2, ticktime, euTick);" },
      { "trigger": "removeInputRecipe\tmods.techreborn.assemblingMachine", "contents": "mods.techreborn.assemblingMachine.removeInputRecipe(iIngredient);" },
      { "trigger": "removeRecipe\tmods.techreborn.assemblingMachine", "contents": "mods.techreborn.assemblingMachine.removeRecipe(output);" },
      { "trigger": "addRecipe\tmods.techreborn.blastFurnace", "contents": "mods.techreborn.blastFurnace.addRecipe(output1, output2, input1, input2, ticktime, euTick, neededHeat);" },
      { "trigger": "removeInputRecipe\tmods.techreborn.blastFurnace", "contents": "mods.techreborn.blastFurnace.removeInputRecipe(iIngredient);" },
      { "trigger": "removeRecipe\tmods.techreborn.blastFurnace", "contents": "mods.techreborn.blastFurnace.removeRecipe(output);" },
      { "trigger": "addRecipe\tmods.techreborn.centrifuge", "contents": "mods.techreborn.centrifuge.addRecipe(output1, output2, output3, output4, input1, input2, ticktime, euTick);" },
      { "trigger": "removeInputRecipe\tmods.techreborn.centrifuge", "contents": "mods.techreborn.centrifuge.removeInputRecipe(iIngredient);" },
      { "trigger": "removeRecipe\tmods.techreborn.centrifuge", "contents": "mods.techreborn.centrifuge.removeRecipe(output);" },
      { "trigger": "addRecipe\tmods.techreborn.chemicalReactorRecipe", "contents": "mods.techreborn.chemicalReactorRecipe.addRecipe(output1, input1, input2, ticktime, euTick);" },
      { "trigger": "removeInputRecipe\tmods.techreborn.chemicalReactorRecipe", "contents": "mods.techreborn.chemicalReactorRecipe.removeInputRecipe(iIngredient);" },
      { "trigger": "removeRecipe\tmods.techreborn.chemicalReactorRecipe", "contents": "mods.techreborn.chemicalReactorRecipe.removeRecipe(output);" },
      { "trigger": "addRecipe\tmods.techreborn.compressor", "contents": "mods.techreborn.compressor.addRecipe(output1, input1, ticktime, euTick);" },
      { "trigger": "removeInputRecipe\tmods.techreborn.compressor", "contents": "mods.techreborn.compressor.removeInputRecipe(iIngredient);" },
      { "trigger": "removeRecipe\tmods.techreborn.compressor", "contents": "mods.techreborn.compressor.removeRecipe(output);" },
      { "trigger": "addRecipe\tmods.techreborn.fusionReactor", "contents": "mods.techreborn.fusionReactor.addRecipe(topInput, bottomInput, output, startEU, euTick, tickTime);" },
      { "trigger": "removeTopInputRecipe\tmods.techreborn.fusionReactor", "contents": "mods.techreborn.fusionReactor.removeTopInputRecipe(iIngredient);" },
      { "trigger": "removeBottomInputRecipe\tmods.techreborn.fusionReactor", "contents": "mods.techreborn.fusionReactor.removeBottomInputRecipe(iIngredient);" },
      { "trigger": "removeRecipe\tmods.techreborn.fusionReactor", "contents": "mods.techreborn.fusionReactor.removeRecipe(output);" },
      { "trigger": "addRecipe\tmods.techreborn.implosionCompressor", "contents": "mods.techreborn.implosionCompressor.addRecipe(output1, output2, input1, input2, ticktime, euTick);" },
      { "trigger": "removeInputRecipe\tmods.techreborn.implosionCompressor", "contents": "mods.techreborn.implosionCompressor.removeInputRecipe(iIngredient);" },
      { "trigger": "removeRecipe\tmods.techreborn.implosionCompressor", "contents": "mods.techreborn.implosionCompressor.removeRecipe(output);" },
      { "trigger": "addRecipe\tmods.techreborn.industrialElectrolyzer", "contents": "mods.techreborn.industrialElectrolyzer.addRecipe(output1, output2, output3, output4, cells, input2, ticktime, euTick);" },
      { "trigger": "removeInputRecipe\tmods.techreborn.industrialElectrolyzer", "contents": "mods.techreborn.industrialElectrolyzer.removeInputRecipe(iIngredient);" },
      { "trigger": "removeRecipe\tmods.techreborn.industrialElectrolyzer", "contents": "mods.techreborn.industrialElectrolyzer.removeRecipe(output);" },
      { "trigger": "addRecipe\tmods.techreborn.grinder", "contents": "mods.techreborn.grinder.addRecipe(output1, output2, output3, output4, input1, input2, ticktime, euTick);" },
      { "trigger": "addRecipe\tmods.techreborn.grinder", "contents": "mods.techreborn.grinder.addRecipe(output1, output2, output3, output4, input1, input2, fluid, ticktime, euTick);" },
      { "trigger": "removeInputRecipe\tmods.techreborn.grinder", "contents": "mods.techreborn.grinder.removeInputRecipe(iIngredient);" },
      { "trigger": "removeRecipe\tmods.techreborn.grinder", "contents": "mods.techreborn.grinder.removeRecipe(output);" },
      { "trigger": "addRecipe\tmods.techreborn.industrialSawmill", "contents": "mods.techreborn.industrialSawmill.addRecipe(output1, output2, output3, input1, input2, fluid, ticktime, euTick);" },
      { "trigger": "addRecipe\tmods.techreborn.industrialSawmill", "contents": "mods.techreborn.industrialSawmill.addRecipe(output1, output2, output3, input1, input2, ticktime, euTick);" },
      { "trigger": "addRecipe\tmods.techreborn.industrialSawmill", "contents": "mods.techreborn.industrialSawmill.addRecipe(output1, output2, output3, input1, input2, ticktime, euTick, useOreDic);" },
      { "trigger": "addRecipe\tmods.techreborn.industrialSawmill", "contents": "mods.techreborn.industrialSawmill.addRecipe(output1, output2, output3, input1, input2, fluid, ticktime, euTick, useOreDic);" },
      { "trigger": "removeInputRecipe\tmods.techreborn.industrialSawmill", "contents": "mods.techreborn.industrialSawmill.removeInputRecipe(iIngredient);" },
      { "trigger": "removeRecipe\tmods.techreborn.industrialSawmill", "contents": "mods.techreborn.industrialSawmill.removeRecipe(output);" },
      { "trigger": "addShaped\tmods.techreborn.rollingMachine", "contents": "mods.techreborn.rollingMachine.addShaped(output, ingredients[][]);" },
      { "trigger": "addShapeless\tmods.techreborn.rollingMachine", "contents": "mods.techreborn.rollingMachine.addShapeless(output, ingredients[]);" },
      { "trigger": "removeRecipe\tmods.techreborn.rollingMachine", "contents": "mods.techreborn.rollingMachine.removeRecipe(output);" },
      { "trigger": "addScrapboxDrop\tmods.techreborn.scrapbox", "contents": "mods.techreborn.scrapbox.addScrapboxDrop(input);" },
      { "trigger": "addRecipe\tmods.techreborn.vacuumFreezer", "contents": "mods.techreborn.vacuumFreezer.addRecipe(output, input, ticktime, euTick);" },
      { "trigger": "removeInputRecipe\tmods.techreborn.vacuumFreezer", "contents": "mods.techreborn.vacuumFreezer.removeInputRecipe(iIngredient);" },
      { "trigger": "removeRecipe\tmods.techreborn.vacuumFreezer", "contents": "mods.techreborn.vacuumFreezer.removeRecipe(output);" },
      { "trigger": "addGeneralCraftingStage\tmods.TinkerStages", "contents": "mods.TinkerStages.addGeneralCraftingStage(stage);" },
      { "trigger": "addGeneralPartReplacingStage\tmods.TinkerStages", "contents": "mods.TinkerStages.addGeneralPartReplacingStage(stage);" },
      { "trigger": "addGeneralPartBuildingStage\tmods.TinkerStages", "contents": "mods.TinkerStages.addGeneralPartBuildingStage(stage);" },
      { "trigger": "addGeneralModifierStage\tmods.TinkerStages", "contents": "mods.TinkerStages.addGeneralModifierStage(stage);" },
      { "trigger": "addToolTypeStage\tmods.TinkerStages", "contents": "mods.TinkerStages.addToolTypeStage(stage, toolType);" },
      { "trigger": "addMaterialStage\tmods.TinkerStages", "contents": "mods.TinkerStages.addMaterialStage(stage, material);" },
      { "trigger": "addModifierStage\tmods.TinkerStages", "contents": "mods.TinkerStages.addModifierStage(stage, modifier);" },
      { "trigger": "addShaped\tmods.vctweaker", "contents": "mods.vctweaker.addShaped(output, ingredients[][], optionalFunction, optionalAction);" },
      { "trigger": "addShapedMirrored\tmods.vctweaker", "contents": "mods.vctweaker.addShapedMirrored(output, ingredients[][], optionalFunction, optionalAction);" },
      { "trigger": "addShapeless\tmods.vctweaker", "contents": "mods.vctweaker.addShapeless(output, ingredients[], optionalFunction, optionalAction);" },
      { "trigger": "addWailaStage\tmods.WailaStages", "contents": "mods.WailaStages.addWailaStage(stage);" },
      { "trigger": "addRequirement\tmods.WailaStages", "contents": "mods.WailaStages.addRequirement(stage, prefix);" },
   ]
}